// Fonts

/// Cross-browser support for @font-face. Supports IE, Gecko, Webkit, Opera.
/// @param {String} $name - is required, arbitrary, and what you will use in font stacks.
/// @param {String} $path - is required using for file
/// @param {String} $weight - shows if the font is bold, defaults to normal
/// @param {String} $style - defaults to normal, might be also italic
/// @param {String} $ext - extensions compatible files
/// @example @include font-face('cdr', '/fonts/cdr', normal, normal);
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

/// Convert font-size from absolute to relative and prints rules
/// @param {Number} $size - original size
/// @param {Number} $base - reference size
@mixin font-size($size, $base: $default-font-size) {
  font-size: if(str-index(quote($size), 'px'),
    unquote(($size / $base) + 'rem'),
    $size
  );
}

/// Make font/text rules for typographies
@mixin make-typo(
  $size: null, // overload parameter: number (e.g. 2rem) or built-in class (e.g. 'main-one')
  $weight: null,
  $style: null,
  $transform: null,
  $decoration: null
) {
  @if ($size) {
    @if (type-of($size) == 'number' or $size == inherit) { // applies font-size
      @include font-size($size);
    } @else { // extends from normalized typography
      @extend %#{$size};
    }
  }

  @if ($weight) {
    font-weight: $weight;
  }

  @if ($style) {
    font-style: $style;
  }

  @if ($transform) {
    text-transform: $transform;
  }

  @if ($decoration) {
    text-decoration: $decoration;
  }

  @content;
}

@function underline($value) {
  @return if($value == true, underline, none);
}

@function background($value) {
  @return if(type-of($value) == 'color', 'background-color', 'background');
}

/// Make base clickable (button, link)
@mixin make-clickable($color, $border: null) {
  @if ($color) {
    color: $color;
  }

  @if ($border != null) {
    @if (type-of($border) == 'bool') {
      text-decoration: underline($border);
    } @else {
      border: $border;
    }
  }

  @content;
}

/// Make link rules
@mixin make-link(
  $color: $link-default-color,
  $underline: $link-default-underline,
  $hover-color: $link-default-hover-color,
  $hover-underline: $link-default-hover-underline
) {
  @include make-clickable($color, $underline);

  @if (($hover-color != null) or ($hover-underline != null)) {
    &:hover {
      $hover-c: if($hover-color != null, $hover-color, $color);
      $hover-u: if($hover-underline != null, $hover-underline, $underline);
      @include make-clickable($hover-c, $hover-u);
    }
  }

  &,
  &:hover {
    &:before,
    &:after {
      text-decoration: none;
    }

    &:before {
      margin-right: $icon-text-space;
    }

    &:after {
      margin-left: $icon-text-space;
    }
  }

  @content;
}

/// Make buttons with complete rules
@mixin make-btn(
  $color: null,
  $background: null,
  $border: null,
  $hover-color: null,
  $hover-background: null,
  $hover-border: null,
  $active-background: null,
  $fullwidth: true
) {
  @extend %btn;

  @if ($color) {
    @include make-clickable($color, $border);
    background: $background;
  }

  &:hover,
  &:focus {
    @include make-clickable($hover-color, $hover-border);
    background-color: $hover-background;
  }

  &:active {
    background-color: $active-background;
  }

  @if ($fullwidth) {
    width: 100%;
  }

  @content;
} //@todo: change mixin name by make-button

/// Make buttons of a concrete theme
@mixin make-button($theme: null, $size: null, $fullwidth: true) {
  @extend %btn;

  @if ($theme) {
    @extend %btn-#{$theme};
  }

  @if ($size) {
    @extend %btn-#{$size};
  }

  @if ($fullwidth) {
    width: 100%;
  }

  @content;
} //@todo: change mixin name by make-btn

// Utils

/// Hide text
@mixin hide($display: true) {
  @if ($display == true) {
    position: absolute;
    padding: 0;
    margin: 0;
    border: 0;
    width: 1px;
    height: 1px;
    overflow: hidden;
    white-space: nowrap;
    clip: rect(0, 0, 0, 0);
  } @else if ($display == false) {
    display: none;
  }
}
