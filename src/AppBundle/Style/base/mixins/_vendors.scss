// Flexbox

@mixin flex-box($inline: false) {
  $suffix: if($inline, 'inline-', null);

  @if (not $AUTOPREFIXER) {
    display: -webkit-#{$suffix}box;
    display: -webkit-#{$suffix}flex;
    display: -moz-#{$suffix}flex;
    display: -ms-#{$suffix}flexbox;
  }

  display: #{$suffix}flex;
}

@mixin flex-col($fg: 1, $fs: null, $fb: null) {
  $fg-boxflex: $fg; // Set a variable to be used by box-flex properties

  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  } // Box-Flex only supports a flex-grow value so let's grab the first item in the list and just return that.

  @if (not $AUTOPREFIXER) {
    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
  }

  flex: $fg $fs $fb;
}

@mixin flex-justify($value) {
  @if (not $AUTOPREFIXER) {
    -webkit-justify-content: $value;
    -moz-justify-content: $value;

    @if $value == flex-start {
      -webkit-box-pack: start;
      -ms-flex-pack: start;
    } @else if $value == flex-end {
      -webkit-box-pack: end;
      -ms-flex-pack: end;
    } @else if $value == space-between {
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
    } @else if $value == space-around {
      -ms-flex-pack: distribute;
    } @else {
      -webkit-box-pack: $value;
      -ms-flex-pack: $value;
    }
  }

  justify-content: $value;
}

@mixin flex-align($value, $mode: 'items') {
  @if (not $AUTOPREFIXER) {
    @if ($mode == 'self') {
      -webkit-align-self: $value; // No Webkit Box Fallback.
      -moz-align-self: $value;

      @if $value == flex-start {
        -ms-flex-item-align: start;
      } @else if $value == flex-end {
        -ms-flex-item-align: end;
      } @else {
        -ms-flex-item-align: $value;
      }
    } @else if ($mode == 'content') {
      -webkit-align-content: $value; // No Webkit Box Fallback.
      -moz-align-content: $value;

      @if $value == flex-start {
        -ms-flex-line-pack: start;
      } @else if $value == flex-end {
        -ms-flex-line-pack: end;
      } @else {
        -ms-flex-line-pack: $value;
      }
    } @else {
      @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
      } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
      } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
      }

      -webkit-align-items: $value;
      -moz-align-items: $value;
    }
  }

  align-#{$mode}: $value;
}

@mixin flex-order($int: 0) {
  @if (not $AUTOPREFIXER) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
  }

  order: $int;
}

@mixin flex($property, $value) {
  @if (not $AUTOPREFIXER) {
    @if ($property == 'direction') {
      @if ($value == row-reverse) {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
      } @else if ($value == column) {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
      } @else if ($value == column-reverse) {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
      } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
      }

      -webkit-flex-direction: $value;
      -moz-flex-direction: $value;
      -ms-flex-direction: $value;
    } @else if ($property == 'wrap') {
      -webkit-flex-wrap: $value; // No Webkit Box fallback.
      -moz-flex-wrap: $value;
      -ms-flex-wrap: if($value == nowrap, none, $value);
    } @else if ($property == 'flow') {
      -webkit-flex-flow: $value; // No Webkit Box fallback.
      -moz-flex-flow: $value;
      -ms-flex-flow: $value;
    } @else if ($property == 'grow') {
      -webkit-box-flex: $value;
      -webkit-flex-grow: $value;
      -moz-flex-grow: $value;
      -ms-flex-positive: $value;
    } @else if ($property == 'shrink') {
      -webkit-flex-shrink: $value;
      -moz-flex-shrink: $value;
      -ms-flex-negative: $value;
    } @else if ($property == 'basis') {
      -webkit-flex-basis: $value;
      -moz-flex-basis: $value;
      -ms-flex-preferred-size: $value;
    } @else {
      @warn 'Flex "#{$property}" property not found';
    }
  }

  flex-#{$property}: $value;
}

// Grid CSS

@function grid-repeat($repeat, $stuff: 1fr) {
  $list: ();

  @for $i from 1 through $repeat {
    $list: append($list, $stuff, space);
  }

  @return $list;
}

@mixin grid() {
  @if (not $AUTOPREFIXER) {
    display: -ms-grid;
  }

  display: grid;
}

@mixin grid-row($row-start, $row-end) {
  @if (not $AUTOPREFIXER) {
    -ms-grid-row: $row-start;
    -ms-grid-row-span: $row-end - $row-start;
  }

  grid-row: #{$row-start} / #{$row-end};
}

@mixin grid-col($col-start, $col-end) {
  @if (not $AUTOPREFIXER) {
    -ms-grid-column: $col-start;
    -ms-grid-column-span: $col-end - $col-start;
  }

  grid-column: #{$col-start} / #{$col-end};
}

@mixin grid-align($value) {
  @if (not $AUTOPREFIXER) {
    -ms-grid-row-align: $value;
  }

  align-self: $value;
}

@mixin grid-justify($value) {
  @if (not $AUTOPREFIXER) {
    -ms-grid-column-align: $value;
  }

  justify-self: $value;
}

@mixin grid-rows($rows...) {
  @if (not $AUTOPREFIXER) {
    -ms-grid-rows: $rows;
  }

  grid-template-rows: $rows;
}

@mixin grid-columns($columns...) {
  @if (not $AUTOPREFIXER) {
    -ms-grid-columns: $columns;
  }

  grid-template-columns: $columns;
}

// Utilities

@mixin opacity($opacity) {
  @if (not $AUTOPREFIXER) {
    -webkit-opacity: $opacity;
    -moz-opacity:    $opacity;
    -khtml-opacity:  $opacity;

    $opacity-ie: ($opacity * 100);
    filter: alpha(opacity=$opacity-ie);
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opactiy=#{$opacity-ie})";
  }

  opacity: $opacity;
}

@mixin radius($radius) {
  @if (not $AUTOPREFIXER) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
  }

  border-radius: $radius;
}

@mixin gradient($type, $direction, $color-stops...) {
  @if (not $AUTOPREFIXER) {
    $is-linear: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $direction);
    $is-radial: index((ellipse, circle, closest-side, farthest-side, closest-corner, farthest-corner), $direction);
    $is-angle: type-of($direction) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($direction));
    $is-repeating: index('repeat', $type);

    $std-direction: $direction;

    @if (not ($is-linear or $is-radial or $is-angle)) { // $direction is an extra color-stop
      $std-direction: 180deg;
    } @else if ($is-linear) {
      $conversion-map: (
        to top          : bottom,
        to top right    : bottom left,
        to right top    : left bottom,
        to right        : left,
        to bottom right : top left,
        to right bottom : left top,
        to bottom       : top,
        to bottom left  : top right,
        to left bottom  : right top,
        to left         : right,
        to left top     : right bottom,
        to top left     : bottom right
      );

      $std-direction: if(map_has_key($conversion-map, $direction), map-get($conversion-map, $direction), 0deg);
    }

    background: -webkit-#{$type}-gradient($std-direction, $color-stops);
    background: -moz-#{$type}-gradient($std-direction, $color-stops);
    background: -ms-#{$type}-gradient($std-direction, $color-stops);
    background: -o-#{$type}-gradient($std-direction, $color-stops);
  }

  background: #{$type}-gradient($direction, $color-stops);
}

@mixin shadow($string, $type: 'box') {
  @if ($type == 'text') {
    text-shadow: $string;
  } @else {
    @if (not $AUTOPREFIXER) {
      -webkit-box-shadow: $string;
      -moz-box-shadow:	  $string;
    }

    box-shadow:	$string;
  }
}

@mixin box-sizing($value) {
  @if (not $AUTOPREFIXER) {
    -webkit-box-sizing: $value;
    -moz-box-sizing: $value;
  }

  box-sizing: $value;
}

@mixin placeholder($color: $form-placeholder-color) {
  @if (not $AUTOPREFIXER) {
    &::-moz-placeholder {
      color: $color;
      opacity: 1; // Firefox's fix; https://github.com/twbs/bootstrap/pull/11526
      @content;
    }
    &:-ms-input-placeholder {
      color: $color;
      @content;
    }
    &::-webkit-input-placeholder {
      color: $color;
      @content;
    }
  } @else {
    &::placeholder {
      color: $color;
      @content;
    }
  }
}

@mixin appearance($value) {
  @if (not $AUTOPREFIXER) {
    -webkit-appearance: $value;
    -moz-appearance:    $value;
  }

  appearance: $value;
}

@mixin column($count: null, $gap: null, $break: null) {
  @if ($count != null) {
    @if (not $AUTOPREFIXER) {
      -webkit-column-count: $count;
      -moz-column-count:    $count;
    }

    column-count: $count;
  }

  @if ($gap != null) {
    @if (not $AUTOPREFIXER) {
      -webkit-column-gap: $gap;
      -moz-column-gap:    $gap;
    }

    column-gap: $gap;
  }

  @if ($break != null) {
    -webkit-column-break-inside: $break;
    -moz-column-break-inside:    $break;
    -mx-column-break-inside:     $break;
    column-break-inside:         $break;
  }
}

@mixin user-select($select) {
  -webkit-user-select: $select;
  -moz-user-select: $select;
  -ms-user-select: $select;
  user-select: $select;
}

@mixin transform($string, $origin: false) {
  $suffix: if($origin, '-origin', '');

  @if (not $AUTOPREFIXER) {
    -webkit-transform#{$suffix}: $string;
    -moz-transform#{$suffix}:    $string;
    -ms-transform#{$suffix}:     $string;
    -o-transform#{$suffix}: 	 $string;
  }

  transform#{$suffix}: $string;
}

@mixin translate($x: null, $y: null, $z: null) {
  @if ($z != null) {
    @if ($x != null and $y != null) {
      @include transform(translate3d($x, $y, $z)); // 3 axis (X/Y/Z) required
    } @else {
      @include transform(translateZ($z)); // 3d translation (only Z)
    }
  } @else {
    @if ($y != null) {
      @if ($x != null) {
        @include transform(translate($x, $y)); // 2 axis (X/Y) required
      } @else {
        @include transform(translateY($y)); // vertical translation
      }
    } @else if($x != null) {
      @include transform(translateX($x)); // horizontal translation
    }
  }
}

@mixin rotate($deg) {
  @include transform(rotate($deg));
}

@mixin skew($deg: 0, $deg2: 0) {
  @include transform(skew($deg, $deg2));
}

@mixin scale($x, $y: null, $z: null) {
  @if ($z) {
    @include transform(scale3d($x, $y, $z));
  } @else {
    @if ($y) {
      @include transform(scale($x, $y));
    } @else {
      @include transform(scale($x));
    }
  }
}

@mixin perspective($value) {
  @if (not $AUTOPREFIXER) {
    -webkit-perspective: $value;
    -moz-perspective:    $value;
    -ms-perspective: 	 $value;
  }

  perspective: $value;
}

@mixin transition($transition, $transform: false) {
  @if (not $AUTOPREFIXER) {
    -webkit-transition: if($transform, -webkit-transform, null) $transition;
    -moz-transition:    if($transform, -moz-transform, null) $transition;
    -o-transition:      if($transform, -o-transform, null) $transition;
  }

  transition: if($transform, transform, null) $transition;
}

@mixin animation($animation, $function: null) {
  $suffix: if($function, '-' + $function, '');

  @if (not $AUTOPREFIXER) {
    -webkit-animation#{$suffix}: #{$animation};
    -moz-animation#{$suffix}:    #{$animation};
    -ms-animation#{$suffix}:     #{$animation};
    -o-animation#{$suffix}:      #{$animation};
  }

  animation#{$suffix}: #{$animation};
}

@mixin keyframes($animation-name) {
  @if (not $AUTOPREFIXER) {
    @-webkit-keyframes #{$animation-name} {
      @content;
    }
    @-moz-keyframes #{$animation-name} {
      @content;
    }
    @-ms-keyframes #{$animation-name} {
      @content;
    }
    @-o-keyframes #{$animation-name} {
      @content;
    }
  }

  @keyframes #{$animation-name} {
    @content;
  }
}