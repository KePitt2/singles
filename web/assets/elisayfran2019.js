!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=pt.type(t);return"function"!==n&&!pt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t,e,n){if(pt.isFunction(e))return pt.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return pt.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(Ct.test(e))return pt.filter(e,t,n);e=pt.filter(e,t)}return pt.grep(t,function(t){return pt.inArray(t,e)>-1!==n})}function o(t,e){do t=t[e];while(t&&1!==t.nodeType);return t}function s(t){var e={};return pt.each(t.match(zt)||[],function(t,n){e[n]=!0}),e}function r(){it.addEventListener?(it.removeEventListener("DOMContentLoaded",a),t.removeEventListener("load",a)):(it.detachEvent("onreadystatechange",a),t.detachEvent("onload",a))}function a(){(it.addEventListener||"load"===t.event.type||"complete"===it.readyState)&&(r(),pt.ready())}function l(t,e,n){if(void 0===n&&1===t.nodeType){var i="data-"+e.replace(Pt,"-$1").toLowerCase();if(n=t.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:jt.test(n)?pt.parseJSON(n):n)}catch(t){}pt.data(t,e,n)}else n=void 0}return n}function c(t){var e;for(e in t)if(("data"!==e||!pt.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function u(t,e,n,i){if(Nt(t)){var o,s,r=pt.expando,a=t.nodeType,l=a?pt.cache:t,c=a?t[r]:t[r]&&r;if(c&&l[c]&&(i||l[c].data)||void 0!==n||"string"!=typeof e)return c||(c=a?t[r]=nt.pop()||pt.guid++:r),l[c]||(l[c]=a?{}:{toJSON:pt.noop}),"object"!=typeof e&&"function"!=typeof e||(i?l[c]=pt.extend(l[c],e):l[c].data=pt.extend(l[c].data,e)),s=l[c],i||(s.data||(s.data={}),s=s.data),void 0!==n&&(s[pt.camelCase(e)]=n),"string"==typeof e?(o=s[e],null==o&&(o=s[pt.camelCase(e)])):o=s,o}}function h(t,e,n){if(Nt(t)){var i,o,s=t.nodeType,r=s?pt.cache:t,a=s?t[pt.expando]:pt.expando;if(r[a]){if(e&&(i=n?r[a]:r[a].data)){pt.isArray(e)?e=e.concat(pt.map(e,pt.camelCase)):e in i?e=[e]:(e=pt.camelCase(e),e=e in i?[e]:e.split(" ")),o=e.length;for(;o--;)delete i[e[o]];if(n?!c(i):!pt.isEmptyObject(i))return}(n||(delete r[a].data,c(r[a])))&&(s?pt.cleanData([t],!0):ht.deleteExpando||r!=r.window?delete r[a]:r[a]=void 0)}}}function d(t,e,n,i){var o,s=1,r=20,a=i?function(){return i.cur()}:function(){return pt.css(t,e,"")},l=a(),c=n&&n[3]||(pt.cssNumber[e]?"":"px"),u=(pt.cssNumber[e]||"px"!==c&&+l)&&Ht.exec(pt.css(t,e));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do s=s||".5",u/=s,pt.style(t,e,u+c);while(s!==(s=a()/l)&&1!==s&&--r)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}function p(t){var e=Rt.split("|"),n=t.createDocumentFragment();if(n.createElement)for(;e.length;)n.createElement(e.pop());return n}function f(t,e){var n,i,o=0,s="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):void 0;if(!s)for(s=[],n=t.childNodes||t;null!=(i=n[o]);o++)!e||pt.nodeName(i,e)?s.push(i):pt.merge(s,f(i,e));return void 0===e||e&&pt.nodeName(t,e)?pt.merge([t],s):s}function m(t,e){for(var n,i=0;null!=(n=t[i]);i++)pt._data(n,"globalEval",!e||pt._data(e[i],"globalEval"))}function g(t){Ot.test(t.type)&&(t.defaultChecked=t.checked)}function v(t,e,n,i,o){for(var s,r,a,l,c,u,h,d=t.length,v=p(e),y=[],w=0;w<d;w++)if(r=t[w],r||0===r)if("object"===pt.type(r))pt.merge(y,r.nodeType?[r]:r);else if(Qt.test(r)){for(l=l||v.appendChild(e.createElement("div")),c=(Bt.exec(r)||["",""])[1].toLowerCase(),h=Xt[c]||Xt._default,l.innerHTML=h[1]+pt.htmlPrefilter(r)+h[2],s=h[0];s--;)l=l.lastChild;if(!ht.leadingWhitespace&&Wt.test(r)&&y.push(e.createTextNode(Wt.exec(r)[0])),!ht.tbody)for(r="table"!==c||Ut.test(r)?"<table>"!==h[1]||Ut.test(r)?0:l:l.firstChild,s=r&&r.childNodes.length;s--;)pt.nodeName(u=r.childNodes[s],"tbody")&&!u.childNodes.length&&r.removeChild(u);for(pt.merge(y,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=v.lastChild}else y.push(e.createTextNode(r));for(l&&v.removeChild(l),ht.appendChecked||pt.grep(f(y,"input"),g),w=0;r=y[w++];)if(i&&pt.inArray(r,i)>-1)o&&o.push(r);else if(a=pt.contains(r.ownerDocument,r),l=f(v.appendChild(r),"script"),a&&m(l),n)for(s=0;r=l[s++];)qt.test(r.type||"")&&n.push(r);return l=null,v}function y(){return!0}function w(){return!1}function x(){try{return it.activeElement}catch(t){}}function b(t,e,n,i,o,s){var r,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)b(t,a,n,i,e[a],s);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),o===!1)o=w;else if(!o)return t;return 1===s&&(r=o,o=function(t){return pt().off(t),r.apply(this,arguments)},o.guid=r.guid||(r.guid=pt.guid++)),t.each(function(){pt.event.add(this,e,o,i,n)})}function _(t,e){return pt.nodeName(t,"table")&&pt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function C(t){return t.type=(null!==pt.find.attr(t,"type"))+"/"+t.type,t}function T(t){var e=oe.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function k(t,e){if(1===e.nodeType&&pt.hasData(t)){var n,i,o,s=pt._data(t),r=pt._data(e,s),a=s.events;if(a){delete r.handle,r.events={};for(n in a)for(i=0,o=a[n].length;i<o;i++)pt.event.add(e,n,a[n][i])}r.data&&(r.data=pt.extend({},r.data))}}function E(t,e){var n,i,o;if(1===e.nodeType){if(n=e.nodeName.toLowerCase(),!ht.noCloneEvent&&e[pt.expando]){o=pt._data(e);for(i in o.events)pt.removeEvent(e,i,o.handle);e.removeAttribute(pt.expando)}"script"===n&&e.text!==t.text?(C(e).text=t.text,T(e)):"object"===n?(e.parentNode&&(e.outerHTML=t.outerHTML),ht.html5Clone&&t.innerHTML&&!pt.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===n&&Ot.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===n?e.defaultSelected=e.selected=t.defaultSelected:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}}function S(t,e,n,i){e=st.apply([],e);var o,s,r,a,l,c,u=0,h=t.length,d=h-1,p=e[0],m=pt.isFunction(p);if(m||h>1&&"string"==typeof p&&!ht.checkClone&&ie.test(p))return t.each(function(o){var s=t.eq(o);m&&(e[0]=p.call(this,o,s.html())),S(s,e,n,i)});if(h&&(c=v(e,t[0].ownerDocument,!1,t,i),o=c.firstChild,1===c.childNodes.length&&(c=o),o||i)){for(a=pt.map(f(c,"script"),C),r=a.length;u<h;u++)s=c,u!==d&&(s=pt.clone(s,!0,!0),r&&pt.merge(a,f(s,"script"))),n.call(t[u],s,u);if(r)for(l=a[a.length-1].ownerDocument,pt.map(a,T),u=0;u<r;u++)s=a[u],qt.test(s.type||"")&&!pt._data(s,"globalEval")&&pt.contains(l,s)&&(s.src?pt._evalUrl&&pt._evalUrl(s.src):pt.globalEval((s.text||s.textContent||s.innerHTML||"").replace(se,"")));c=o=null}return t}function D(t,e,n){for(var i,o=e?pt.filter(e,t):t,s=0;null!=(i=o[s]);s++)n||1!==i.nodeType||pt.cleanData(f(i)),i.parentNode&&(n&&pt.contains(i.ownerDocument,i)&&m(f(i,"script")),i.parentNode.removeChild(i));return t}function z(t,e){var n=pt(e.createElement(t)).appendTo(e.body),i=pt.css(n[0],"display");return n.detach(),i}function A(t){var e=it,n=ce[t];return n||(n=z(t,e),"none"!==n&&n||(le=(le||pt("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=(le[0].contentWindow||le[0].contentDocument).document,e.write(),e.close(),n=z(t,e),le.detach()),ce[t]=n),n}function F(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function N(t){if(t in Te)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=Ce.length;n--;)if(t=Ce[n]+e,t in Te)return t}function j(t,e){for(var n,i,o,s=[],r=0,a=t.length;r<a;r++)i=t[r],i.style&&(s[r]=pt._data(i,"olddisplay"),n=i.style.display,e?(s[r]||"none"!==n||(i.style.display=""),""===i.style.display&&Mt(i)&&(s[r]=pt._data(i,"olddisplay",A(i.nodeName)))):(o=Mt(i),(n&&"none"!==n||!o)&&pt._data(i,"olddisplay",o?n:pt.css(i,"display"))));for(r=0;r<a;r++)i=t[r],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?s[r]||"":"none"));return t}function P(t,e,n){var i=xe.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function L(t,e,n,i,o){for(var s=n===(i?"border":"content")?4:"width"===e?1:0,r=0;s<4;s+=2)"margin"===n&&(r+=pt.css(t,n+It[s],!0,o)),i?("content"===n&&(r-=pt.css(t,"padding"+It[s],!0,o)),"margin"!==n&&(r-=pt.css(t,"border"+It[s]+"Width",!0,o))):(r+=pt.css(t,"padding"+It[s],!0,o),"padding"!==n&&(r+=pt.css(t,"border"+It[s]+"Width",!0,o)));return r}function H(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,s=fe(t),r=ht.boxSizing&&"border-box"===pt.css(t,"boxSizing",!1,s);if(o<=0||null==o){if(o=me(t,e,s),(o<0||null==o)&&(o=t.style[e]),he.test(o))return o;i=r&&(ht.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+L(t,e,n||(r?"border":"content"),i,s)+"px"}function I(t,e,n,i,o){return new I.prototype.init(t,e,n,i,o)}function M(){return t.setTimeout(function(){ke=void 0}),ke=pt.now()}function $(t,e){var n,i={height:t},o=0;for(e=e?1:0;o<4;o+=2-e)n=It[o],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function O(t,e,n){for(var i,o=(W.tweeners[e]||[]).concat(W.tweeners["*"]),s=0,r=o.length;s<r;s++)if(i=o[s].call(n,e,t))return i}function B(t,e,n){var i,o,s,r,a,l,c,u,h=this,d={},p=t.style,f=t.nodeType&&Mt(t),m=pt._data(t,"fxshow");n.queue||(a=pt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,pt.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=pt.css(t,"display"),u="none"===c?pt._data(t,"olddisplay")||A(t.nodeName):c,"inline"===u&&"none"===pt.css(t,"float")&&(ht.inlineBlockNeedsLayout&&"inline"!==A(t.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",ht.shrinkWrapBlocks()||h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(i in e)if(o=e[i],Se.exec(o)){if(delete e[i],s=s||"toggle"===o,o===(f?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;f=!0}d[i]=m&&m[i]||pt.style(t,i)}else c=void 0;if(pt.isEmptyObject(d))"inline"===("none"===c?A(t.nodeName):c)&&(p.display=c);else{m?"hidden"in m&&(f=m.hidden):m=pt._data(t,"fxshow",{}),s&&(m.hidden=!f),f?pt(t).show():h.done(function(){pt(t).hide()}),h.done(function(){var e;pt._removeData(t,"fxshow");for(e in d)pt.style(t,e,d[e])});for(i in d)r=O(f?m[i]:0,i,h),i in m||(m[i]=r.start,f&&(r.end=r.start,r.start="width"===i||"height"===i?1:0))}}function q(t,e){var n,i,o,s,r;for(n in t)if(i=pt.camelCase(n),o=e[i],s=t[n],pt.isArray(s)&&(o=s[1],s=t[n]=s[0]),n!==i&&(t[i]=s,delete t[n]),r=pt.cssHooks[i],r&&"expand"in r){s=r.expand(s),delete t[i];for(n in s)n in t||(t[n]=s[n],e[n]=o)}else e[i]=o}function W(t,e,n){var i,o,s=0,r=W.prefilters.length,a=pt.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=ke||M(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,s=1-i,r=0,l=c.tweens.length;r<l;r++)c.tweens[r].run(s);return a.notifyWith(t,[c,s,n]),s<1&&l?n:(a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:pt.extend({},e),opts:pt.extend(!0,{specialEasing:{},easing:pt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ke||M(),duration:n.duration,tweens:[],createTween:function(e,n){var i=pt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(q(u,c.opts.specialEasing);s<r;s++)if(i=W.prefilters[s].call(c,t,u,c.opts))return pt.isFunction(i.stop)&&(pt._queueHooks(c.elem,c.opts.queue).stop=pt.proxy(i.stop,i)),i;return pt.map(u,O,c),pt.isFunction(c.opts.start)&&c.opts.start.call(t,c),pt.fx.timer(pt.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function R(t){return pt.attr(t,"class")||""}function X(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,s=e.toLowerCase().match(zt)||[];if(pt.isFunction(n))for(;i=s[o++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function Q(t,e,n,i){function o(a){var l;return s[a]=!0,pt.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||r||s[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),o(c),!1)}),l}var s={},r=t===Ke;return o(e.dataTypes[0])||!s["*"]&&o("*")}function U(t,e){var n,i,o=pt.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((o[i]?t:n||(n={}))[i]=e[i]);return n&&pt.extend(!0,t,n),t}function V(t,e,n){for(var i,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=t.mimeType||e.getResponseHeader("Content-Type"));if(o)for(r in a)if(a[r]&&a[r].test(o)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}i||(i=r)}s=s||i}if(s)return s!==l[0]&&l.unshift(s),n[s]}function G(t,e,n,i){var o,s,r,a,l,c={},u=t.dataTypes.slice();if(u[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=u.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=u.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(r=c[l+" "+s]||c["* "+s],!r)for(o in c)if(a=o.split(" "),a[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){r===!0?r=c[o]:c[o]!==!0&&(s=a[0],u.unshift(a[1]));break}if(r!==!0)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}function Z(t){return t.style&&t.style.display||pt.css(t,"display")}function Y(t){if(!pt.contains(t.ownerDocument||it,t))return!0;for(;t&&1===t.nodeType;){if("none"===Z(t)||"hidden"===t.type)return!0;t=t.parentNode}return!1}function K(t,e,n,i){var o;if(pt.isArray(e))pt.each(e,function(e,o){n||on.test(t)?i(t,o):K(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)});else if(n||"object"!==pt.type(e))i(t,e);else for(o in e)K(t+"["+o+"]",e[o],n,i)}function J(){try{return new t.XMLHttpRequest}catch(t){}}function tt(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function et(t){return pt.isWindow(t)?t:9===t.nodeType&&(t.defaultView||t.parentWindow)}var nt=[],it=t.document,ot=nt.slice,st=nt.concat,rt=nt.push,at=nt.indexOf,lt={},ct=lt.toString,ut=lt.hasOwnProperty,ht={},dt="1.12.4",pt=function(t,e){return new pt.fn.init(t,e)},ft=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,mt=/^-ms-/,gt=/-([\da-z])/gi,vt=function(t,e){return e.toUpperCase()};pt.fn=pt.prototype={jquery:dt,constructor:pt,selector:"",length:0,toArray:function(){return ot.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:ot.call(this)},pushStack:function(t){var e=pt.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return pt.each(this,t)},map:function(t){return this.pushStack(pt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(ot.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:rt,sort:nt.sort,splice:nt.splice},pt.extend=pt.fn.extend=function(){var t,e,n,i,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||pt.isFunction(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(o=arguments[a]))for(i in o)t=r[i],n=o[i],r!==n&&(c&&n&&(pt.isPlainObject(n)||(e=pt.isArray(n)))?(e?(e=!1,s=t&&pt.isArray(t)?t:[]):s=t&&pt.isPlainObject(t)?t:{},r[i]=pt.extend(c,s,n)):void 0!==n&&(r[i]=n));return r},pt.extend({expando:"jQuery"+(dt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===pt.type(t)},isArray:Array.isArray||function(t){return"array"===pt.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){var e=t&&t.toString();return!pt.isArray(t)&&e-parseFloat(e)+1>=0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},isPlainObject:function(t){var e;if(!t||"object"!==pt.type(t)||t.nodeType||pt.isWindow(t))return!1;try{if(t.constructor&&!ut.call(t,"constructor")&&!ut.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}if(!ht.ownFirst)for(e in t)return ut.call(t,e);for(e in t);return void 0===e||ut.call(t,e)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?lt[ct.call(t)]||"object":typeof t},globalEval:function(e){e&&pt.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(mt,"ms-").replace(gt,vt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,o=0;if(n(t))for(i=t.length;o<i&&e.call(t[o],o,t[o])!==!1;o++);else for(o in t)if(e.call(t[o],o,t[o])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(ft,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?pt.merge(i,"string"==typeof t?[t]:t):rt.call(i,t)),i},inArray:function(t,e,n){var i;if(e){if(at)return at.call(e,t,n);for(i=e.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in e&&e[n]===t)return n}return-1},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;)t[o++]=e[i++];if(n!==n)for(;void 0!==e[i];)t[o++]=e[i++];return t.length=o,t},grep:function(t,e,n){for(var i,o=[],s=0,r=t.length,a=!n;s<r;s++)i=!e(t[s],s),i!==a&&o.push(t[s]);return o},map:function(t,e,i){var o,s,r=0,a=[];if(n(t))for(o=t.length;r<o;r++)s=e(t[r],r,i),null!=s&&a.push(s);else for(r in t)s=e(t[r],r,i),null!=s&&a.push(s);return st.apply([],a)},guid:1,proxy:function(t,e){var n,i,o;if("string"==typeof e&&(o=t[e],e=t,t=o),pt.isFunction(t))return n=ot.call(arguments,2),i=function(){return t.apply(e||this,n.concat(ot.call(arguments)))},i.guid=t.guid=t.guid||pt.guid++,i},now:function(){return+new Date},support:ht}),"function"==typeof Symbol&&(pt.fn[Symbol.iterator]=nt[Symbol.iterator]),pt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){lt["[object "+e+"]"]=e.toLowerCase()});var yt=function(t){function e(t,e,n,i){var o,s,r,a,l,c,h,p,f=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!i&&((e?e.ownerDocument||e:O)!==N&&F(e),e=e||N,P)){if(11!==m&&(c=vt.exec(t)))if(o=c[1]){if(9===m){if(!(r=e.getElementById(o)))return n;if(r.id===o)return n.push(r),n}else if(f&&(r=f.getElementById(o))&&M(e,r)&&r.id===o)return n.push(r),n}else{if(c[2])return K.apply(n,e.getElementsByTagName(t)),n;if((o=c[3])&&b.getElementsByClassName&&e.getElementsByClassName)return K.apply(n,e.getElementsByClassName(o)),n}if(b.qsa&&!X[t+" "]&&(!L||!L.test(t))){if(1!==m)f=e,p=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(wt,"\\$&"):e.setAttribute("id",a=$),h=k(t),s=h.length,l=dt.test(a)?"#"+a:"[id='"+a+"']";s--;)h[s]=l+" "+d(h[s]);p=h.join(","),f=yt.test(t)&&u(e.parentNode)||e}if(p)try{return K.apply(n,f.querySelectorAll(p)),n}catch(t){}finally{a===$&&e.removeAttribute("id")}}}return S(t.replace(at,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>_.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[$]=!0,t}function o(t){var e=N.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var n=t.split("|"),i=n.length;i--;)_.attrHandle[n[i]]=e}function r(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||U)-(~t.sourceIndex||U);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return i(function(e){return e=+e,i(function(n,i){for(var o,s=t([],n.length,e),r=s.length;r--;)n[o=s[r]]&&(n[o]=!(i[o]=n[o]))})})}function u(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function d(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function p(t,e,n){var i=e.dir,o=n&&"parentNode"===i,s=q++;return e.first?function(e,n,s){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,s)}:function(e,n,r){var a,l,c,u=[B,s];if(r){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,r))return!0}else for(;e=e[i];)if(1===e.nodeType||o){if(c=e[$]||(e[$]={}),l=c[e.uniqueID]||(c[e.uniqueID]={}),(a=l[i])&&a[0]===B&&a[1]===s)return u[2]=a[2];if(l[i]=u,u[2]=t(e,n,r))return!0}}}function f(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function m(t,n,i){for(var o=0,s=n.length;o<s;o++)e(t,n[o],i);return i}function g(t,e,n,i,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(n&&!n(s,i,o)||(r.push(s),c&&e.push(a)));return r}function v(t,e,n,o,s,r){return o&&!o[$]&&(o=v(o)),s&&!s[$]&&(s=v(s,r)),i(function(i,r,a,l){var c,u,h,d=[],p=[],f=r.length,v=i||m(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:g(v,d,t,a,l),w=n?s||(i?t:f||o)?[]:r:y;if(n&&n(y,w,a,l),o)for(c=g(w,p),o(c,[],a,l),u=c.length;u--;)(h=c[u])&&(w[p[u]]=!(y[p[u]]=h));if(i){if(s||t){if(s){for(c=[],u=w.length;u--;)(h=w[u])&&c.push(y[u]=h);s(null,w=[],c,l)}for(u=w.length;u--;)(h=w[u])&&(c=s?tt(i,h):d[u])>-1&&(i[c]=!(r[c]=h))}}else w=g(w===r?w.splice(f,w.length):w),s?s(null,r,w,l):K.apply(r,w)})}function y(t){for(var e,n,i,o=t.length,s=_.relative[t[0].type],r=s||_.relative[" "],a=s?1:0,l=p(function(t){return t===e},r,!0),c=p(function(t){return tt(e,t)>-1},r,!0),u=[function(t,n,i){var o=!s&&(i||n!==D)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,o}];a<o;a++)if(n=_.relative[t[a].type])u=[p(f(u),n)];else{if(n=_.filter[t[a].type].apply(null,t[a].matches),n[$]){for(i=++a;i<o&&!_.relative[t[i].type];i++);return v(a>1&&f(u),a>1&&d(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),n,a<i&&y(t.slice(a,i)),i<o&&y(t=t.slice(i)),i<o&&d(t))}u.push(n)}return f(u)}function w(t,n){var o=n.length>0,s=t.length>0,r=function(i,r,a,l,c){var u,h,d,p=0,f="0",m=i&&[],v=[],y=D,w=i||s&&_.find.TAG("*",c),x=B+=null==y?1:Math.random()||.1,b=w.length;for(c&&(D=r===N||r||c);f!==b&&null!=(u=w[f]);f++){if(s&&u){for(h=0,r||u.ownerDocument===N||(F(u),a=!P);d=t[h++];)if(d(u,r||N,a)){l.push(u);break}c&&(B=x)}o&&((u=!d&&u)&&p--,i&&m.push(u))}if(p+=f,o&&f!==p){for(h=0;d=n[h++];)d(m,v,r,a);if(i){if(p>0)for(;f--;)m[f]||v[f]||(v[f]=Z.call(l));v=g(v)}K.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&e.uniqueSort(l)}return c&&(B=x,D=y),m};return o?i(r):r}var x,b,_,C,T,k,E,S,D,z,A,F,N,j,P,L,H,I,M,$="sizzle"+1*new Date,O=t.document,B=0,q=0,W=n(),R=n(),X=n(),Q=function(t,e){return t===e&&(A=!0),0},U=1<<31,V={}.hasOwnProperty,G=[],Z=G.pop,Y=G.push,K=G.push,J=G.slice,tt=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ot="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",st=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",rt=new RegExp(nt+"+","g"),at=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),lt=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ut=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(st),dt=new RegExp("^"+it+"$"),pt={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it+"|[*])"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,yt=/[+~]/,wt=/'|\\/g,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),bt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},_t=function(){F()};try{K.apply(G=J.call(O.childNodes),O.childNodes),G[O.childNodes.length].nodeType}catch(t){K={apply:G.length?function(t,e){Y.apply(t,J.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}b=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},F=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:O;return i!==N&&9===i.nodeType&&i.documentElement?(N=i,j=N.documentElement,P=!T(N),(n=N.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",_t,!1):n.attachEvent&&n.attachEvent("onunload",_t)),b.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=o(function(t){return t.appendChild(N.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=gt.test(N.getElementsByClassName),b.getById=o(function(t){return j.appendChild(t).id=$,!N.getElementsByName||!N.getElementsByName($).length}),b.getById?(_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&P){var n=e.getElementById(t);return n?[n]:[]}},_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){return t.getAttribute("id")===e}}):(delete _.find.ID,_.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),_.find.TAG=b.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,s=e.getElementsByTagName(t);if("*"===t){for(;n=s[o++];)1===n.nodeType&&i.push(n);return i}return s},_.find.CLASS=b.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&P)return e.getElementsByClassName(t)},H=[],L=[],(b.qsa=gt.test(N.querySelectorAll))&&(o(function(t){j.appendChild(t).innerHTML="<a id='"+$+"'></a><select id='"+$+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+$+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+$+"+*").length||L.push(".#.+[+~]")}),o(function(t){var e=N.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(b.matchesSelector=gt.test(I=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&o(function(t){b.disconnectedMatch=I.call(t,"div"),I.call(t,"[s!='']:x"),H.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),H=H.length&&new RegExp(H.join("|")),e=gt.test(j.compareDocumentPosition),M=e||gt.test(j.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},Q=e?function(t,e){if(t===e)return A=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===N||t.ownerDocument===O&&M(O,t)?-1:e===N||e.ownerDocument===O&&M(O,e)?1:z?tt(z,t)-tt(z,e):0:4&n?-1:1)}:function(t,e){if(t===e)return A=!0,0;var n,i=0,o=t.parentNode,s=e.parentNode,a=[t],l=[e];if(!o||!s)return t===N?-1:e===N?1:o?-1:s?1:z?tt(z,t)-tt(z,e):0;if(o===s)return r(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?r(a[i],l[i]):a[i]===O?-1:l[i]===O?1:0},N):N},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==N&&F(t),n=n.replace(ut,"='$1']"),b.matchesSelector&&P&&!X[n+" "]&&(!H||!H.test(n))&&(!L||!L.test(n)))try{var i=I.call(t,n);if(i||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,N,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==N&&F(t),M(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==N&&F(t);var n=_.attrHandle[e.toLowerCase()],i=n&&V.call(_.attrHandle,e.toLowerCase())?n(t,e,!P):void 0;return void 0!==i?i:b.attributes||!P?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,o=0;if(A=!b.detectDuplicates,z=!b.sortStable&&t.slice(0),t.sort(Q),A){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return z=null,t},C=e.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=C(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=C(e);return n},_=e.selectors={cacheLength:50,createPseudo:i,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,bt),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,bt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=k(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,bt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(o){var s=e.attr(o,t);return null==s?"!="===n:!n||(s+="","="===n?s===i:"!="===n?s!==i:"^="===n?i&&0===s.indexOf(i):"*="===n?i&&s.indexOf(i)>-1:"$="===n?i&&s.slice(-i.length)===i:"~="===n?(" "+s.replace(rt," ")+" ").indexOf(i)>-1:"|="===n&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,o){var s="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,d,p,f,m=s!==r?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(g){if(s){for(;m;){for(d=e;d=d[m];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(d=g,h=d[$]||(d[$]={}),u=h[d.uniqueID]||(h[d.uniqueID]={}),c=u[t]||[],p=c[0]===B&&c[1],w=p&&c[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(w=p=0)||f.pop();)if(1===d.nodeType&&++w&&d===e){
u[t]=[B,p,w];break}}else if(y&&(d=e,h=d[$]||(d[$]={}),u=h[d.uniqueID]||(h[d.uniqueID]={}),c=u[t]||[],p=c[0]===B&&c[1],w=p),w===!1)for(;(d=++p&&d&&d[m]||(w=p=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++w||(y&&(h=d[$]||(d[$]={}),u=h[d.uniqueID]||(h[d.uniqueID]={}),u[t]=[B,w]),d!==e)););return w-=o,w===i||w%i===0&&w/i>=0}}},PSEUDO:function(t,n){var o,s=_.pseudos[t]||_.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[$]?s(n):s.length>1?(o=[t,t,"",n],_.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,o=s(t,n),r=o.length;r--;)i=tt(t,o[r]),t[i]=!(e[i]=o[r])}):function(t){return s(t,0,o)}):s}},pseudos:{not:i(function(t){var e=[],n=[],o=E(t.replace(at,"$1"));return o[$]?i(function(t,e,n,i){for(var s,r=o(t,null,i,[]),a=t.length;a--;)(s=r[a])&&(t[a]=!(e[a]=s))}):function(t,i,s){return e[0]=t,o(e,null,s,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(xt,bt),function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:i(function(t){return dt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,bt).toLowerCase(),function(e){var n;do if(n=P?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===j},focus:function(t){return t===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!_.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[n<0?n+e:n]}),even:c(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},_.pseudos.nth=_.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[x]=a(x);for(x in{submit:!0,reset:!0})_.pseudos[x]=l(x);return h.prototype=_.filters=_.pseudos,_.setFilters=new h,k=e.tokenize=function(t,n){var i,o,s,r,a,l,c,u=R[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],c=_.preFilter;a;){i&&!(o=lt.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(s=[])),i=!1,(o=ct.exec(a))&&(i=o.shift(),s.push({value:i,type:o[0].replace(at," ")}),a=a.slice(i.length));for(r in _.filter)!(o=pt[r].exec(a))||c[r]&&!(o=c[r](o))||(i=o.shift(),s.push({value:i,type:r,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):R(t,l).slice(0)},E=e.compile=function(t,e){var n,i=[],o=[],s=X[t+" "];if(!s){for(e||(e=k(t)),n=e.length;n--;)s=y(e[n]),s[$]?i.push(s):o.push(s);s=X(t,w(o,i)),s.selector=t}return s},S=e.select=function(t,e,n,i){var o,s,r,a,l,c="function"==typeof t&&t,h=!i&&k(t=c.selector||t);if(n=n||[],1===h.length){if(s=h[0]=h[0].slice(0),s.length>2&&"ID"===(r=s[0]).type&&b.getById&&9===e.nodeType&&P&&_.relative[s[1].type]){if(e=(_.find.ID(r.matches[0].replace(xt,bt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=pt.needsContext.test(t)?0:s.length;o--&&(r=s[o],!_.relative[a=r.type]);)if((l=_.find[a])&&(i=l(r.matches[0].replace(xt,bt),yt.test(s[0].type)&&u(e.parentNode)||e))){if(s.splice(o,1),t=i.length&&d(s),!t)return K.apply(n,i),n;break}}return(c||E(t,h))(i,e,!P,n,!e||yt.test(t)&&u(e.parentNode)||e),n},b.sortStable=$.split("").sort(Q).join("")===$,b.detectDuplicates=!!A,F(),b.sortDetached=o(function(t){return 1&t.compareDocumentPosition(N.createElement("div"))}),o(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&o(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),o(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,n){var i;if(!n)return t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);pt.find=yt,pt.expr=yt.selectors,pt.expr[":"]=pt.expr.pseudos,pt.uniqueSort=pt.unique=yt.uniqueSort,pt.text=yt.getText,pt.isXMLDoc=yt.isXML,pt.contains=yt.contains;var wt=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&pt(t).is(n))break;i.push(t)}return i},xt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},bt=pt.expr.match.needsContext,_t=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Ct=/^.[^:#\[\.,]*$/;pt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?pt.find.matchesSelector(i,t)?[i]:[]:pt.find.matches(t,pt.grep(e,function(t){return 1===t.nodeType}))},pt.fn.extend({find:function(t){var e,n=[],i=this,o=i.length;if("string"!=typeof t)return this.pushStack(pt(t).filter(function(){for(e=0;e<o;e++)if(pt.contains(i[e],this))return!0}));for(e=0;e<o;e++)pt.find(t,i[e],n);return n=this.pushStack(o>1?pt.unique(n):n),n.selector=this.selector?this.selector+" "+t:t,n},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&bt.test(t)?pt(t):t||[],!1).length}});var Tt,kt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,Et=pt.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||Tt,"string"==typeof t){if(i="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:kt.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof pt?e[0]:e,pt.merge(this,pt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:it,!0)),_t.test(i[1])&&pt.isPlainObject(e))for(i in e)pt.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}if(o=it.getElementById(i[2]),o&&o.parentNode){if(o.id!==i[2])return Tt.find(t);this.length=1,this[0]=o}return this.context=it,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):pt.isFunction(t)?"undefined"!=typeof n.ready?n.ready(t):t(pt):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),pt.makeArray(t,this))};Et.prototype=pt.fn,Tt=pt(it);var St=/^(?:parents|prev(?:Until|All))/,Dt={children:!0,contents:!0,next:!0,prev:!0};pt.fn.extend({has:function(t){var e,n=pt(t,this),i=n.length;return this.filter(function(){for(e=0;e<i;e++)if(pt.contains(this,n[e]))return!0})},closest:function(t,e){for(var n,i=0,o=this.length,s=[],r=bt.test(t)||"string"!=typeof t?pt(t,e||this.context):0;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(r?r.index(n)>-1:1===n.nodeType&&pt.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(s.length>1?pt.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?pt.inArray(this[0],pt(t)):pt.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(pt.uniqueSort(pt.merge(this.get(),pt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),pt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return wt(t,"parentNode")},parentsUntil:function(t,e,n){return wt(t,"parentNode",n)},next:function(t){return o(t,"nextSibling")},prev:function(t){return o(t,"previousSibling")},nextAll:function(t){return wt(t,"nextSibling")},prevAll:function(t){return wt(t,"previousSibling")},nextUntil:function(t,e,n){return wt(t,"nextSibling",n)},prevUntil:function(t,e,n){return wt(t,"previousSibling",n)},siblings:function(t){return xt((t.parentNode||{}).firstChild,t)},children:function(t){return xt(t.firstChild)},contents:function(t){return pt.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:pt.merge([],t.childNodes)}},function(t,e){pt.fn[t]=function(n,i){var o=pt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=pt.filter(i,o)),this.length>1&&(Dt[t]||(o=pt.uniqueSort(o)),St.test(t)&&(o=o.reverse())),this.pushStack(o)}});var zt=/\S+/g;pt.Callbacks=function(t){t="string"==typeof t?s(t):pt.extend({},t);var e,n,i,o,r=[],a=[],l=-1,c=function(){for(o=t.once,i=e=!0;a.length;l=-1)for(n=a.shift();++l<r.length;)r[l].apply(n[0],n[1])===!1&&t.stopOnFalse&&(l=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},u={add:function(){return r&&(n&&!e&&(l=r.length-1,a.push(n)),function e(n){pt.each(n,function(n,i){pt.isFunction(i)?t.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==pt.type(i)&&e(i)})}(arguments),n&&!e&&c()),this},remove:function(){return pt.each(arguments,function(t,e){for(var n;(n=pt.inArray(e,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(t){return t?pt.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=a=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=!0,n||u.disable(),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},pt.extend({Deferred:function(t){var e=[["resolve","done",pt.Callbacks("once memory"),"resolved"],["reject","fail",pt.Callbacks("once memory"),"rejected"],["notify","progress",pt.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return pt.Deferred(function(n){pt.each(e,function(e,s){var r=pt.isFunction(t[e])&&t[e];o[s[1]](function(){var t=r&&r.apply(this,arguments);t&&pt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[s[0]+"With"](this===i?n.promise():this,r?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?pt.extend(t,i):i}},o={};return i.pipe=i.then,pt.each(e,function(t,s){var r=s[2],a=s[3];i[s[1]]=r.add,a&&r.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),o[s[0]]=function(){return o[s[0]+"With"](this===o?i:this,arguments),this},o[s[0]+"With"]=r.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e,n,i,o=0,s=ot.call(arguments),r=s.length,a=1!==r||t&&pt.isFunction(t.promise)?r:0,l=1===a?t:pt.Deferred(),c=function(t,n,i){return function(o){n[t]=this,i[t]=arguments.length>1?ot.call(arguments):o,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(r>1)for(e=new Array(r),n=new Array(r),i=new Array(r);o<r;o++)s[o]&&pt.isFunction(s[o].promise)?s[o].promise().progress(c(o,n,e)).done(c(o,i,s)).fail(l.reject):--a;return a||l.resolveWith(i,s),l.promise()}});var At;pt.fn.ready=function(t){return pt.ready.promise().done(t),this},pt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?pt.readyWait++:pt.ready(!0)},ready:function(t){(t===!0?--pt.readyWait:pt.isReady)||(pt.isReady=!0,t!==!0&&--pt.readyWait>0||(At.resolveWith(it,[pt]),pt.fn.triggerHandler&&(pt(it).triggerHandler("ready"),pt(it).off("ready"))))}}),pt.ready.promise=function(e){if(!At)if(At=pt.Deferred(),"complete"===it.readyState||"loading"!==it.readyState&&!it.documentElement.doScroll)t.setTimeout(pt.ready);else if(it.addEventListener)it.addEventListener("DOMContentLoaded",a),t.addEventListener("load",a);else{it.attachEvent("onreadystatechange",a),t.attachEvent("onload",a);var n=!1;try{n=null==t.frameElement&&it.documentElement}catch(t){}n&&n.doScroll&&!function e(){if(!pt.isReady){try{n.doScroll("left")}catch(n){return t.setTimeout(e,50)}r(),pt.ready()}}()}return At.promise(e)},pt.ready.promise();var Ft;for(Ft in pt(ht))break;ht.ownFirst="0"===Ft,ht.inlineBlockNeedsLayout=!1,pt(function(){var t,e,n,i;n=it.getElementsByTagName("body")[0],n&&n.style&&(e=it.createElement("div"),i=it.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),"undefined"!=typeof e.style.zoom&&(e.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ht.inlineBlockNeedsLayout=t=3===e.offsetWidth,t&&(n.style.zoom=1)),n.removeChild(i))}),function(){var t=it.createElement("div");ht.deleteExpando=!0;try{delete t.test}catch(t){ht.deleteExpando=!1}t=null}();var Nt=function(t){var e=pt.noData[(t.nodeName+" ").toLowerCase()],n=+t.nodeType||1;return(1===n||9===n)&&(!e||e!==!0&&t.getAttribute("classid")===e)},jt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Pt=/([A-Z])/g;pt.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(t){return t=t.nodeType?pt.cache[t[pt.expando]]:t[pt.expando],!!t&&!c(t)},data:function(t,e,n){return u(t,e,n)},removeData:function(t,e){return h(t,e)},_data:function(t,e,n){return u(t,e,n,!0)},_removeData:function(t,e){return h(t,e,!0)}}),pt.fn.extend({data:function(t,e){var n,i,o,s=this[0],r=s&&s.attributes;if(void 0===t){if(this.length&&(o=pt.data(s),1===s.nodeType&&!pt._data(s,"parsedAttrs"))){for(n=r.length;n--;)r[n]&&(i=r[n].name,0===i.indexOf("data-")&&(i=pt.camelCase(i.slice(5)),l(s,i,o[i])));pt._data(s,"parsedAttrs",!0)}return o}return"object"==typeof t?this.each(function(){pt.data(this,t)}):arguments.length>1?this.each(function(){pt.data(this,t,e)}):s?l(s,t,pt.data(s,t)):void 0},removeData:function(t){return this.each(function(){pt.removeData(this,t)})}}),pt.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=pt._data(t,e),n&&(!i||pt.isArray(n)?i=pt._data(t,e,pt.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=pt.queue(t,e),i=n.length,o=n.shift(),s=pt._queueHooks(t,e),r=function(){pt.dequeue(t,e)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete s.stop,o.call(t,r,s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return pt._data(t,n)||pt._data(t,n,{empty:pt.Callbacks("once memory").add(function(){pt._removeData(t,e+"queue"),pt._removeData(t,n)})})}}),pt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?pt.queue(this[0],t):void 0===e?this:this.each(function(){var n=pt.queue(this,t,e);pt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&pt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){pt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=pt.Deferred(),s=this,r=this.length,a=function(){--i||o.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)n=pt._data(s[r],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}}),function(){var t;ht.shrinkWrapBlocks=function(){if(null!=t)return t;t=!1;var e,n,i;return n=it.getElementsByTagName("body")[0],n&&n.style?(e=it.createElement("div"),i=it.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),"undefined"!=typeof e.style.zoom&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(it.createElement("div")).style.width="5px",t=3!==e.offsetWidth),n.removeChild(i),t):void 0}}();var Lt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ht=new RegExp("^(?:([+-])=|)("+Lt+")([a-z%]*)$","i"),It=["Top","Right","Bottom","Left"],Mt=function(t,e){return t=e||t,"none"===pt.css(t,"display")||!pt.contains(t.ownerDocument,t)},$t=function(t,e,n,i,o,s,r){var a=0,l=t.length,c=null==n;if("object"===pt.type(n)){o=!0;for(a in n)$t(t,e,a,n[a],!0,s,r)}else if(void 0!==i&&(o=!0,pt.isFunction(i)||(r=!0),c&&(r?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(pt(t),n)})),e))for(;a<l;a++)e(t[a],n,r?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):s},Ot=/^(?:checkbox|radio)$/i,Bt=/<([\w:-]+)/,qt=/^$|\/(?:java|ecma)script/i,Wt=/^\s+/,Rt="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var t=it.createElement("div"),e=it.createDocumentFragment(),n=it.createElement("input");t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ht.leadingWhitespace=3===t.firstChild.nodeType,ht.tbody=!t.getElementsByTagName("tbody").length,ht.htmlSerialize=!!t.getElementsByTagName("link").length,ht.html5Clone="<:nav></:nav>"!==it.createElement("nav").cloneNode(!0).outerHTML,n.type="checkbox",n.checked=!0,e.appendChild(n),ht.appendChecked=n.checked,t.innerHTML="<textarea>x</textarea>",ht.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,e.appendChild(t),n=it.createElement("input"),n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),ht.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.noCloneEvent=!!t.addEventListener,t[pt.expando]=1,ht.attributes=!t.getAttribute(pt.expando)}();var Xt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ht.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};Xt.optgroup=Xt.option,Xt.tbody=Xt.tfoot=Xt.colgroup=Xt.caption=Xt.thead,Xt.th=Xt.td;var Qt=/<|&#?\w+;/,Ut=/<tbody/i;!function(){var e,n,i=it.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})n="on"+e,(ht[e]=n in t)||(i.setAttribute(n,"t"),ht[e]=i.attributes[n].expando===!1);i=null}();var Vt=/^(?:input|select|textarea)$/i,Gt=/^key/,Zt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Yt=/^(?:focusinfocus|focusoutblur)$/,Kt=/^([^.]*)(?:\.(.+)|)/;pt.event={global:{},add:function(t,e,n,i,o){var s,r,a,l,c,u,h,d,p,f,m,g=pt._data(t);if(g){for(n.handler&&(l=n,n=l.handler,o=l.selector),n.guid||(n.guid=pt.guid++),(r=g.events)||(r=g.events={}),(u=g.handle)||(u=g.handle=function(t){return"undefined"==typeof pt||t&&pt.event.triggered===t.type?void 0:pt.event.dispatch.apply(u.elem,arguments)},u.elem=t),e=(e||"").match(zt)||[""],a=e.length;a--;)s=Kt.exec(e[a])||[],p=m=s[1],f=(s[2]||"").split(".").sort(),p&&(c=pt.event.special[p]||{},p=(o?c.delegateType:c.bindType)||p,c=pt.event.special[p]||{},h=pt.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&pt.expr.match.needsContext.test(o),namespace:f.join(".")},l),(d=r[p])||(d=r[p]=[],d.delegateCount=0,c.setup&&c.setup.call(t,i,f,u)!==!1||(t.addEventListener?t.addEventListener(p,u,!1):t.attachEvent&&t.attachEvent("on"+p,u))),c.add&&(c.add.call(t,h),h.handler.guid||(h.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,h):d.push(h),pt.event.global[p]=!0);t=null}},remove:function(t,e,n,i,o){var s,r,a,l,c,u,h,d,p,f,m,g=pt.hasData(t)&&pt._data(t);if(g&&(u=g.events)){for(e=(e||"").match(zt)||[""],c=e.length;c--;)if(a=Kt.exec(e[c])||[],p=m=a[1],f=(a[2]||"").split(".").sort(),p){for(h=pt.event.special[p]||{},p=(i?h.delegateType:h.bindType)||p,d=u[p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=s=d.length;s--;)r=d[s],!o&&m!==r.origType||n&&n.guid!==r.guid||a&&!a.test(r.namespace)||i&&i!==r.selector&&("**"!==i||!r.selector)||(d.splice(s,1),r.selector&&d.delegateCount--,h.remove&&h.remove.call(t,r));l&&!d.length&&(h.teardown&&h.teardown.call(t,f,g.handle)!==!1||pt.removeEvent(t,p,g.handle),delete u[p])}else for(p in u)pt.event.remove(t,p+e[c],n,i,!0);pt.isEmptyObject(u)&&(delete g.handle,pt._removeData(t,"events"))}},trigger:function(e,n,i,o){var s,r,a,l,c,u,h,d=[i||it],p=ut.call(e,"type")?e.type:e,f=ut.call(e,"namespace")?e.namespace.split("."):[];if(a=u=i=i||it,3!==i.nodeType&&8!==i.nodeType&&!Yt.test(p+pt.event.triggered)&&(p.indexOf(".")>-1&&(f=p.split("."),p=f.shift(),f.sort()),r=p.indexOf(":")<0&&"on"+p,e=e[pt.expando]?e:new pt.Event(p,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:pt.makeArray(n,[e]),c=pt.event.special[p]||{},o||!c.trigger||c.trigger.apply(i,n)!==!1)){if(!o&&!c.noBubble&&!pt.isWindow(i)){for(l=c.delegateType||p,Yt.test(l+p)||(a=a.parentNode);a;a=a.parentNode)d.push(a),u=a;u===(i.ownerDocument||it)&&d.push(u.defaultView||u.parentWindow||t)}for(h=0;(a=d[h++])&&!e.isPropagationStopped();)e.type=h>1?l:c.bindType||p,s=(pt._data(a,"events")||{})[e.type]&&pt._data(a,"handle"),s&&s.apply(a,n),s=r&&a[r],s&&s.apply&&Nt(a)&&(e.result=s.apply(a,n),e.result===!1&&e.preventDefault());if(e.type=p,!o&&!e.isDefaultPrevented()&&(!c._default||c._default.apply(d.pop(),n)===!1)&&Nt(i)&&r&&i[p]&&!pt.isWindow(i)){u=i[r],u&&(i[r]=null),pt.event.triggered=p;try{i[p]()}catch(t){}pt.event.triggered=void 0,u&&(i[r]=u)}return e.result}},dispatch:function(t){t=pt.event.fix(t);var e,n,i,o,s,r=[],a=ot.call(arguments),l=(pt._data(this,"events")||{})[t.type]||[],c=pt.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(r=pt.event.handlers.call(this,t,l),e=0;(o=r[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,n=0;(s=o.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(s.namespace)||(t.handleObj=s,t.data=s.data,i=((pt.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,s,r=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(i=[],n=0;n<a;n++)s=e[n],o=s.selector+" ",void 0===i[o]&&(i[o]=s.needsContext?pt(o,this).index(l)>-1:pt.find(o,this,null,[l]).length),i[o]&&i.push(s);i.length&&r.push({elem:l,handlers:i})}return a<e.length&&r.push({elem:this,handlers:e.slice(a)}),r},fix:function(t){if(t[pt.expando])return t;var e,n,i,o=t.type,s=t,r=this.fixHooks[o];for(r||(this.fixHooks[o]=r=Zt.test(o)?this.mouseHooks:Gt.test(o)?this.keyHooks:{}),i=r.props?this.props.concat(r.props):this.props,t=new pt.Event(s),e=i.length;e--;)n=i[e],t[n]=s[n];return t.target||(t.target=s.srcElement||it),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,r.filter?r.filter(t,s):t},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,s=e.button,r=e.fromElement;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||it,o=i.documentElement,n=i.body,t.pageX=e.clientX+(o&&o.scrollLeft||n&&n.scrollLeft||0)-(o&&o.clientLeft||n&&n.clientLeft||0),t.pageY=e.clientY+(o&&o.scrollTop||n&&n.scrollTop||0)-(o&&o.clientTop||n&&n.clientTop||0)),!t.relatedTarget&&r&&(t.relatedTarget=r===t.target?e.toElement:r),t.which||void 0===s||(t.which=1&s?1:2&s?3:4&s?2:0),t}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){if(this===x()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(pt.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(t){return pt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n){var i=pt.extend(new pt.Event,n,{type:t,isSimulated:!0});pt.event.trigger(i,null,e),i.isDefaultPrevented()&&n.preventDefault()}},pt.removeEvent=it.removeEventListener?function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)}:function(t,e,n){var i="on"+e;t.detachEvent&&("undefined"==typeof t[i]&&(t[i]=null),t.detachEvent(i,n))},pt.Event=function(t,e){return this instanceof pt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?y:w):this.type=t,e&&pt.extend(this,e),this.timeStamp=t&&t.timeStamp||pt.now(),void(this[pt.expando]=!0)):new pt.Event(t,e)},pt.Event.prototype={constructor:pt.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=y,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=y,t&&!this.isSimulated&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=y,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},pt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){pt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,s=t.handleObj;return o&&(o===i||pt.contains(i,o))||(t.type=s.origType,n=s.handler.apply(this,arguments),t.type=e),n}}}),ht.submit||(pt.event.special.submit={setup:function(){return!pt.nodeName(this,"form")&&void pt.event.add(this,"click._submit keypress._submit",function(t){var e=t.target,n=pt.nodeName(e,"input")||pt.nodeName(e,"button")?pt.prop(e,"form"):void 0;n&&!pt._data(n,"submit")&&(pt.event.add(n,"submit._submit",function(t){t._submitBubble=!0}),pt._data(n,"submit",!0))})},postDispatch:function(t){t._submitBubble&&(delete t._submitBubble,this.parentNode&&!t.isTrigger&&pt.event.simulate("submit",this.parentNode,t))},teardown:function(){return!pt.nodeName(this,"form")&&void pt.event.remove(this,"._submit")}}),ht.change||(pt.event.special.change={setup:function(){return Vt.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(pt.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._justChanged=!0)}),pt.event.add(this,"click._change",function(t){this._justChanged&&!t.isTrigger&&(this._justChanged=!1),pt.event.simulate("change",this,t)})),!1):void pt.event.add(this,"beforeactivate._change",function(t){var e=t.target;Vt.test(e.nodeName)&&!pt._data(e,"change")&&(pt.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||pt.event.simulate("change",this.parentNode,t)}),pt._data(e,"change",!0))})},handle:function(t){var e=t.target;if(this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type)return t.handleObj.handler.apply(this,arguments)},teardown:function(){return pt.event.remove(this,"._change"),!Vt.test(this.nodeName)}}),ht.focusin||pt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){pt.event.simulate(e,t.target,pt.event.fix(t))};pt.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=pt._data(i,e);o||i.addEventListener(t,n,!0),pt._data(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=pt._data(i,e)-1;o?pt._data(i,e,o):(i.removeEventListener(t,n,!0),pt._removeData(i,e))}}}),pt.fn.extend({on:function(t,e,n,i){return b(this,t,e,n,i)},one:function(t,e,n,i){return b(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,pt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=w),this.each(function(){pt.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){pt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return pt.event.trigger(t,e,n,!0)}});var Jt=/ jQuery\d+="(?:null|\d+)"/g,te=new RegExp("<(?:"+Rt+")[\\s/>]","i"),ee=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ne=/<script|<style|<link/i,ie=/checked\s*(?:[^=]|=\s*.checked.)/i,oe=/^true\/(.*)/,se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,re=p(it),ae=re.appendChild(it.createElement("div"));pt.extend({htmlPrefilter:function(t){return t.replace(ee,"<$1></$2>")},clone:function(t,e,n){var i,o,s,r,a,l=pt.contains(t.ownerDocument,t);if(ht.html5Clone||pt.isXMLDoc(t)||!te.test("<"+t.nodeName+">")?s=t.cloneNode(!0):(ae.innerHTML=t.outerHTML,ae.removeChild(s=ae.firstChild)),!(ht.noCloneEvent&&ht.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||pt.isXMLDoc(t)))for(i=f(s),a=f(t),r=0;null!=(o=a[r]);++r)i[r]&&E(o,i[r]);if(e)if(n)for(a=a||f(t),i=i||f(s),r=0;null!=(o=a[r]);r++)k(o,i[r]);else k(t,s);return i=f(s,"script"),i.length>0&&m(i,!l&&f(t,"script")),i=a=o=null,s},cleanData:function(t,e){for(var n,i,o,s,r=0,a=pt.expando,l=pt.cache,c=ht.attributes,u=pt.event.special;null!=(n=t[r]);r++)if((e||Nt(n))&&(o=n[a],s=o&&l[o])){if(s.events)for(i in s.events)u[i]?pt.event.remove(n,i):pt.removeEvent(n,i,s.handle);l[o]&&(delete l[o],c||"undefined"==typeof n.removeAttribute?n[a]=void 0:n.removeAttribute(a),nt.push(o))}}}),pt.fn.extend({domManip:S,detach:function(t){return D(this,t,!0)},remove:function(t){return D(this,t)},text:function(t){return $t(this,function(t){return void 0===t?pt.text(this):this.empty().append((this[0]&&this[0].ownerDocument||it).createTextNode(t))},null,t,arguments.length)},append:function(){return S(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=_(this,t);e.appendChild(t)}})},prepend:function(){return S(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=_(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return S(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return S(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&pt.cleanData(f(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&pt.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return pt.clone(this,t,e)})},html:function(t){return $t(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t)return 1===e.nodeType?e.innerHTML.replace(Jt,""):void 0;if("string"==typeof t&&!ne.test(t)&&(ht.htmlSerialize||!te.test(t))&&(ht.leadingWhitespace||!Wt.test(t))&&!Xt[(Bt.exec(t)||["",""])[1].toLowerCase()]){t=pt.htmlPrefilter(t);try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(pt.cleanData(f(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return S(this,arguments,function(e){var n=this.parentNode;pt.inArray(this,t)<0&&(pt.cleanData(f(this)),n&&n.replaceChild(e,this))},t)}}),pt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",
insertAfter:"after",replaceAll:"replaceWith"},function(t,e){pt.fn[t]=function(t){for(var n,i=0,o=[],s=pt(t),r=s.length-1;i<=r;i++)n=i===r?this:this.clone(!0),pt(s[i])[e](n),rt.apply(o,n.get());return this.pushStack(o)}});var le,ce={HTML:"block",BODY:"block"},ue=/^margin/,he=new RegExp("^("+Lt+")(?!px)[a-z%]+$","i"),de=function(t,e,n,i){var o,s,r={};for(s in e)r[s]=t.style[s],t.style[s]=e[s];o=n.apply(t,i||[]);for(s in e)t.style[s]=r[s];return o},pe=it.documentElement;!function(){function e(){var e,u,h=it.documentElement;h.appendChild(l),c.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",n=o=a=!1,i=r=!0,t.getComputedStyle&&(u=t.getComputedStyle(c),n="1%"!==(u||{}).top,a="2px"===(u||{}).marginLeft,o="4px"===(u||{width:"4px"}).width,c.style.marginRight="50%",i="4px"===(u||{marginRight:"4px"}).marginRight,e=c.appendChild(it.createElement("div")),e.style.cssText=c.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",e.style.marginRight=e.style.width="0",c.style.width="1px",r=!parseFloat((t.getComputedStyle(e)||{}).marginRight),c.removeChild(e)),c.style.display="none",s=0===c.getClientRects().length,s&&(c.style.display="",c.innerHTML="<table><tr><td></td><td>t</td></tr></table>",c.childNodes[0].style.borderCollapse="separate",e=c.getElementsByTagName("td"),e[0].style.cssText="margin:0;border:0;padding:0;display:none",s=0===e[0].offsetHeight,s&&(e[0].style.display="",e[1].style.display="none",s=0===e[0].offsetHeight)),h.removeChild(l)}var n,i,o,s,r,a,l=it.createElement("div"),c=it.createElement("div");c.style&&(c.style.cssText="float:left;opacity:.5",ht.opacity="0.5"===c.style.opacity,ht.cssFloat=!!c.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",ht.clearCloneStyle="content-box"===c.style.backgroundClip,l=it.createElement("div"),l.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",c.innerHTML="",l.appendChild(c),ht.boxSizing=""===c.style.boxSizing||""===c.style.MozBoxSizing||""===c.style.WebkitBoxSizing,pt.extend(ht,{reliableHiddenOffsets:function(){return null==n&&e(),s},boxSizingReliable:function(){return null==n&&e(),o},pixelMarginRight:function(){return null==n&&e(),i},pixelPosition:function(){return null==n&&e(),n},reliableMarginRight:function(){return null==n&&e(),r},reliableMarginLeft:function(){return null==n&&e(),a}}))}();var fe,me,ge=/^(top|right|bottom|left)$/;t.getComputedStyle?(fe=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},me=function(t,e,n){var i,o,s,r,a=t.style;return n=n||fe(t),r=n?n.getPropertyValue(e)||n[e]:void 0,""!==r&&void 0!==r||pt.contains(t.ownerDocument,t)||(r=pt.style(t,e)),n&&!ht.pixelMarginRight()&&he.test(r)&&ue.test(e)&&(i=a.width,o=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=n.width,a.width=i,a.minWidth=o,a.maxWidth=s),void 0===r?r:r+""}):pe.currentStyle&&(fe=function(t){return t.currentStyle},me=function(t,e,n){var i,o,s,r,a=t.style;return n=n||fe(t),r=n?n[e]:void 0,null==r&&a&&a[e]&&(r=a[e]),he.test(r)&&!ge.test(e)&&(i=a.left,o=t.runtimeStyle,s=o&&o.left,s&&(o.left=t.currentStyle.left),a.left="fontSize"===e?"1em":r,r=a.pixelLeft+"px",a.left=i,s&&(o.left=s)),void 0===r?r:r+""||"auto"});var ve=/alpha\([^)]*\)/i,ye=/opacity\s*=\s*([^)]*)/i,we=/^(none|table(?!-c[ea]).+)/,xe=new RegExp("^("+Lt+")(.*)$","i"),be={position:"absolute",visibility:"hidden",display:"block"},_e={letterSpacing:"0",fontWeight:"400"},Ce=["Webkit","O","Moz","ms"],Te=it.createElement("div").style;pt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=me(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:ht.cssFloat?"cssFloat":"styleFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=pt.camelCase(e),l=t.style;if(e=pt.cssProps[a]||(pt.cssProps[a]=N(a)||a),r=pt.cssHooks[e]||pt.cssHooks[a],void 0===n)return r&&"get"in r&&void 0!==(o=r.get(t,!1,i))?o:l[e];if(s=typeof n,"string"===s&&(o=Ht.exec(n))&&o[1]&&(n=d(t,e,o),s="number"),null!=n&&n===n&&("number"===s&&(n+=o&&o[3]||(pt.cssNumber[a]?"":"px")),ht.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),!(r&&"set"in r&&void 0===(n=r.set(t,n,i)))))try{l[e]=n}catch(t){}}},css:function(t,e,n,i){var o,s,r,a=pt.camelCase(e);return e=pt.cssProps[a]||(pt.cssProps[a]=N(a)||a),r=pt.cssHooks[e]||pt.cssHooks[a],r&&"get"in r&&(s=r.get(t,!0,n)),void 0===s&&(s=me(t,e,i)),"normal"===s&&e in _e&&(s=_e[e]),""===n||n?(o=parseFloat(s),n===!0||isFinite(o)?o||0:s):s}}),pt.each(["height","width"],function(t,e){pt.cssHooks[e]={get:function(t,n,i){if(n)return we.test(pt.css(t,"display"))&&0===t.offsetWidth?de(t,be,function(){return H(t,e,i)}):H(t,e,i)},set:function(t,n,i){var o=i&&fe(t);return P(t,n,i?L(t,e,i,ht.boxSizing&&"border-box"===pt.css(t,"boxSizing",!1,o),o):0)}}}),ht.opacity||(pt.cssHooks.opacity={get:function(t,e){return ye.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var n=t.style,i=t.currentStyle,o=pt.isNumeric(e)?"alpha(opacity="+100*e+")":"",s=i&&i.filter||n.filter||"";n.zoom=1,(e>=1||""===e)&&""===pt.trim(s.replace(ve,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===e||i&&!i.filter)||(n.filter=ve.test(s)?s.replace(ve,o):s+" "+o)}}),pt.cssHooks.marginRight=F(ht.reliableMarginRight,function(t,e){if(e)return de(t,{display:"inline-block"},me,[t,"marginRight"])}),pt.cssHooks.marginLeft=F(ht.reliableMarginLeft,function(t,e){if(e)return(parseFloat(me(t,"marginLeft"))||(pt.contains(t.ownerDocument,t)?t.getBoundingClientRect().left-de(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}):0))+"px"}),pt.each({margin:"",padding:"",border:"Width"},function(t,e){pt.cssHooks[t+e]={expand:function(n){for(var i=0,o={},s="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+It[i]+e]=s[i]||s[i-2]||s[0];return o}},ue.test(t)||(pt.cssHooks[t+e].set=P)}),pt.fn.extend({css:function(t,e){return $t(this,function(t,e,n){var i,o,s={},r=0;if(pt.isArray(e)){for(i=fe(t),o=e.length;r<o;r++)s[e[r]]=pt.css(t,e[r],!1,i);return s}return void 0!==n?pt.style(t,e,n):pt.css(t,e)},t,e,arguments.length>1)},show:function(){return j(this,!0)},hide:function(){return j(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Mt(this)?pt(this).show():pt(this).hide()})}}),pt.Tween=I,I.prototype={constructor:I,init:function(t,e,n,i,o,s){this.elem=t,this.prop=n,this.easing=o||pt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(pt.cssNumber[n]?"":"px")},cur:function(){var t=I.propHooks[this.prop];return t&&t.get?t.get(this):I.propHooks._default.get(this)},run:function(t){var e,n=I.propHooks[this.prop];return this.options.duration?this.pos=e=pt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=pt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){pt.fx.step[t.prop]?pt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[pt.cssProps[t.prop]]&&!pt.cssHooks[t.prop]?t.elem[t.prop]=t.now:pt.style(t.elem,t.prop,t.now+t.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},pt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},pt.fx=I.prototype.init,pt.fx.step={};var ke,Ee,Se=/^(?:toggle|show|hide)$/,De=/queueHooks$/;pt.Animation=pt.extend(W,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return d(n.elem,t,Ht.exec(e),n),n}]},tweener:function(t,e){pt.isFunction(t)?(e=t,t=["*"]):t=t.match(zt);for(var n,i=0,o=t.length;i<o;i++)n=t[i],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(e)},prefilters:[B],prefilter:function(t,e){e?W.prefilters.unshift(t):W.prefilters.push(t)}}),pt.speed=function(t,e,n){var i=t&&"object"==typeof t?pt.extend({},t):{complete:n||!n&&e||pt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!pt.isFunction(e)&&e};return i.duration=pt.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in pt.fx.speeds?pt.fx.speeds[i.duration]:pt.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){pt.isFunction(i.old)&&i.old.call(this),i.queue&&pt.dequeue(this,i.queue)},i},pt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Mt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=pt.isEmptyObject(t),s=pt.speed(e,n,i),r=function(){var e=W(this,pt.extend({},t),s);(o||pt._data(this,"finish"))&&e.stop(!0)};return r.finish=r,o||s.queue===!1?this.each(r):this.queue(s.queue,r)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",s=pt.timers,r=pt._data(this);if(o)r[o]&&r[o].stop&&i(r[o]);else for(o in r)r[o]&&r[o].stop&&De.test(o)&&i(r[o]);for(o=s.length;o--;)s[o].elem!==this||null!=t&&s[o].queue!==t||(s[o].anim.stop(n),e=!1,s.splice(o,1));!e&&n||pt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=pt._data(this),i=n[t+"queue"],o=n[t+"queueHooks"],s=pt.timers,r=i?i.length:0;for(n.finish=!0,pt.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),pt.each(["toggle","show","hide"],function(t,e){var n=pt.fn[e];pt.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate($(e,!0),t,i,o)}}),pt.each({slideDown:$("show"),slideUp:$("hide"),slideToggle:$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){pt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),pt.timers=[],pt.fx.tick=function(){var t,e=pt.timers,n=0;for(ke=pt.now();n<e.length;n++)t=e[n],t()||e[n]!==t||e.splice(n--,1);e.length||pt.fx.stop(),ke=void 0},pt.fx.timer=function(t){pt.timers.push(t),t()?pt.fx.start():pt.timers.pop()},pt.fx.interval=13,pt.fx.start=function(){Ee||(Ee=t.setInterval(pt.fx.tick,pt.fx.interval))},pt.fx.stop=function(){t.clearInterval(Ee),Ee=null},pt.fx.speeds={slow:600,fast:200,_default:400},pt.fn.delay=function(e,n){return e=pt.fx?pt.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})},function(){var t,e=it.createElement("input"),n=it.createElement("div"),i=it.createElement("select"),o=i.appendChild(it.createElement("option"));n=it.createElement("div"),n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",t=n.getElementsByTagName("a")[0],e.setAttribute("type","checkbox"),n.appendChild(e),t=n.getElementsByTagName("a")[0],t.style.cssText="top:1px",ht.getSetAttribute="t"!==n.className,ht.style=/top/.test(t.getAttribute("style")),ht.hrefNormalized="/a"===t.getAttribute("href"),ht.checkOn=!!e.value,ht.optSelected=o.selected,ht.enctype=!!it.createElement("form").enctype,i.disabled=!0,ht.optDisabled=!o.disabled,e=it.createElement("input"),e.setAttribute("value",""),ht.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),ht.radioValue="t"===e.value}();var ze=/\r/g,Ae=/[\x20\t\r\n\f]+/g;pt.fn.extend({val:function(t){var e,n,i,o=this[0];{if(arguments.length)return i=pt.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(o=i?t.call(this,n,pt(this).val()):t,null==o?o="":"number"==typeof o?o+="":pt.isArray(o)&&(o=pt.map(o,function(t){return null==t?"":t+""})),e=pt.valHooks[this.type]||pt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return e=pt.valHooks[o.type]||pt.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(ze,""):null==n?"":n)}}}),pt.extend({valHooks:{option:{get:function(t){var e=pt.find.attr(t,"value");return null!=e?e:pt.trim(pt.text(t)).replace(Ae," ")}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,s="select-one"===t.type||o<0,r=s?null:[],a=s?o+1:i.length,l=o<0?a:s?o:0;l<a;l++)if(n=i[l],(n.selected||l===o)&&(ht.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!pt.nodeName(n.parentNode,"optgroup"))){if(e=pt(n).val(),s)return e;r.push(e)}return r},set:function(t,e){for(var n,i,o=t.options,s=pt.makeArray(e),r=o.length;r--;)if(i=o[r],pt.inArray(pt.valHooks.option.get(i),s)>-1)try{i.selected=n=!0}catch(t){i.scrollHeight}else i.selected=!1;return n||(t.selectedIndex=-1),o}}}}),pt.each(["radio","checkbox"],function(){pt.valHooks[this]={set:function(t,e){if(pt.isArray(e))return t.checked=pt.inArray(pt(t).val(),e)>-1}},ht.checkOn||(pt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Fe,Ne,je=pt.expr.attrHandle,Pe=/^(?:checked|selected)$/i,Le=ht.getSetAttribute,He=ht.input;pt.fn.extend({attr:function(t,e){return $t(this,pt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){pt.removeAttr(this,t)})}}),pt.extend({attr:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?pt.prop(t,e,n):(1===s&&pt.isXMLDoc(t)||(e=e.toLowerCase(),o=pt.attrHooks[e]||(pt.expr.match.bool.test(e)?Ne:Fe)),void 0!==n?null===n?void pt.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:(i=pt.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!ht.radioValue&&"radio"===e&&pt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,o=0,s=e&&e.match(zt);if(s&&1===t.nodeType)for(;n=s[o++];)i=pt.propFix[n]||n,pt.expr.match.bool.test(n)?He&&Le||!Pe.test(n)?t[i]=!1:t[pt.camelCase("default-"+n)]=t[i]=!1:pt.attr(t,n,""),t.removeAttribute(Le?n:i)}}),Ne={set:function(t,e,n){return e===!1?pt.removeAttr(t,n):He&&Le||!Pe.test(n)?t.setAttribute(!Le&&pt.propFix[n]||n,n):t[pt.camelCase("default-"+n)]=t[n]=!0,n}},pt.each(pt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=je[e]||pt.find.attr;He&&Le||!Pe.test(e)?je[e]=function(t,e,i){var o,s;return i||(s=je[e],je[e]=o,o=null!=n(t,e,i)?e.toLowerCase():null,je[e]=s),o}:je[e]=function(t,e,n){if(!n)return t[pt.camelCase("default-"+e)]?e.toLowerCase():null}}),He&&Le||(pt.attrHooks.value={set:function(t,e,n){return pt.nodeName(t,"input")?void(t.defaultValue=e):Fe&&Fe.set(t,e,n)}}),Le||(Fe={set:function(t,e,n){var i=t.getAttributeNode(n);if(i||t.setAttributeNode(i=t.ownerDocument.createAttribute(n)),i.value=e+="","value"===n||e===t.getAttribute(n))return e}},je.id=je.name=je.coords=function(t,e,n){var i;if(!n)return(i=t.getAttributeNode(e))&&""!==i.value?i.value:null},pt.valHooks.button={get:function(t,e){var n=t.getAttributeNode(e);if(n&&n.specified)return n.value},set:Fe.set},pt.attrHooks.contenteditable={set:function(t,e,n){Fe.set(t,""!==e&&e,n)}},pt.each(["width","height"],function(t,e){pt.attrHooks[e]={set:function(t,n){if(""===n)return t.setAttribute(e,"auto"),n}}})),ht.style||(pt.attrHooks.style={get:function(t){return t.style.cssText||void 0},set:function(t,e){return t.style.cssText=e+""}});var Ie=/^(?:input|select|textarea|button|object)$/i,Me=/^(?:a|area)$/i;pt.fn.extend({prop:function(t,e){return $t(this,pt.prop,t,e,arguments.length>1)},removeProp:function(t){return t=pt.propFix[t]||t,this.each(function(){try{this[t]=void 0,delete this[t]}catch(t){}})}}),pt.extend({prop:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&pt.isXMLDoc(t)||(e=pt.propFix[e]||e,o=pt.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=pt.find.attr(t,"tabindex");return e?parseInt(e,10):Ie.test(t.nodeName)||Me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ht.hrefNormalized||pt.each(["href","src"],function(t,e){pt.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}}),ht.optSelected||(pt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),pt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pt.propFix[this.toLowerCase()]=this}),ht.enctype||(pt.propFix.enctype="encoding");var $e=/[\t\r\n\f]/g;pt.fn.extend({addClass:function(t){var e,n,i,o,s,r,a,l=0;if(pt.isFunction(t))return this.each(function(e){pt(this).addClass(t.call(this,e,R(this)))});if("string"==typeof t&&t)for(e=t.match(zt)||[];n=this[l++];)if(o=R(n),i=1===n.nodeType&&(" "+o+" ").replace($e," ")){for(r=0;s=e[r++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");a=pt.trim(i),o!==a&&pt.attr(n,"class",a)}return this},removeClass:function(t){var e,n,i,o,s,r,a,l=0;if(pt.isFunction(t))return this.each(function(e){pt(this).removeClass(t.call(this,e,R(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(zt)||[];n=this[l++];)if(o=R(n),i=1===n.nodeType&&(" "+o+" ").replace($e," ")){for(r=0;s=e[r++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");a=pt.trim(i),o!==a&&pt.attr(n,"class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):pt.isFunction(t)?this.each(function(n){pt(this).toggleClass(t.call(this,n,R(this),e),e)}):this.each(function(){var e,i,o,s;if("string"===n)for(i=0,o=pt(this),s=t.match(zt)||[];e=s[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||(e=R(this),e&&pt._data(this,"__className__",e),pt.attr(this,"class",e||t===!1?"":pt._data(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+R(n)+" ").replace($e," ").indexOf(e)>-1)return!0;return!1}}),pt.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){pt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),pt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}});var Oe=t.location,Be=pt.now(),qe=/\?/,We=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;pt.parseJSON=function(e){if(t.JSON&&t.JSON.parse)return t.JSON.parse(e+"");var n,i=null,o=pt.trim(e+"");return o&&!pt.trim(o.replace(We,function(t,e,o,s){return n&&e&&(i=0),0===i?t:(n=o||e,i+=!s-!o,"")}))?Function("return "+o)():pt.error("Invalid JSON: "+e)},pt.parseXML=function(e){var n,i;if(!e||"string"!=typeof e)return null;try{t.DOMParser?(i=new t.DOMParser,n=i.parseFromString(e,"text/xml")):(n=new t.ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(e))}catch(t){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||pt.error("Invalid XML: "+e),n};var Re=/#.*$/,Xe=/([?&])_=[^&]*/,Qe=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ue=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ve=/^(?:GET|HEAD)$/,Ge=/^\/\//,Ze=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ye={},Ke={},Je="*/".concat("*"),tn=Oe.href,en=Ze.exec(tn.toLowerCase())||[];pt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:tn,type:"GET",isLocal:Ue.test(en[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Je,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":pt.parseJSON,"text xml":pt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?U(U(t,pt.ajaxSettings),e):U(pt.ajaxSettings,t)},ajaxPrefilter:X(Ye),ajaxTransport:X(Ke),ajax:function(e,n){function i(e,n,i,o){var s,h,y,w,b,C=n;2!==x&&(x=2,l&&t.clearTimeout(l),u=void 0,a=o||"",_.readyState=e>0?4:0,s=e>=200&&e<300||304===e,i&&(w=V(d,_,i)),w=G(d,w,_,s),s?(d.ifModified&&(b=_.getResponseHeader("Last-Modified"),b&&(pt.lastModified[r]=b),b=_.getResponseHeader("etag"),b&&(pt.etag[r]=b)),204===e||"HEAD"===d.type?C="nocontent":304===e?C="notmodified":(C=w.state,h=w.data,y=w.error,s=!y)):(y=C,!e&&C||(C="error",e<0&&(e=0))),_.status=e,_.statusText=(n||C)+"",s?m.resolveWith(p,[h,C,_]):m.rejectWith(p,[_,C,y]),_.statusCode(v),v=void 0,c&&f.trigger(s?"ajaxSuccess":"ajaxError",[_,d,s?h:y]),g.fireWith(p,[_,C]),c&&(f.trigger("ajaxComplete",[_,d]),--pt.active||pt.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var o,s,r,a,l,c,u,h,d=pt.ajaxSetup({},n),p=d.context||d,f=d.context&&(p.nodeType||p.jquery)?pt(p):pt.event,m=pt.Deferred(),g=pt.Callbacks("once memory"),v=d.statusCode||{},y={},w={},x=0,b="canceled",_={readyState:0,getResponseHeader:function(t){var e;if(2===x){if(!h)for(h={};e=Qe.exec(a);)h[e[1].toLowerCase()]=e[2];e=h[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return x||(t=w[n]=w[n]||t,y[t]=e),this},overrideMimeType:function(t){return x||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(x<2)for(e in t)v[e]=[v[e],t[e]];else _.always(t[_.status]);return this},abort:function(t){var e=t||b;return u&&u.abort(e),i(0,e),this}};if(m.promise(_).complete=g.add,_.success=_.done,_.error=_.fail,d.url=((e||d.url||tn)+"").replace(Re,"").replace(Ge,en[1]+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=pt.trim(d.dataType||"*").toLowerCase().match(zt)||[""],null==d.crossDomain&&(o=Ze.exec(d.url.toLowerCase()),d.crossDomain=!(!o||o[1]===en[1]&&o[2]===en[2]&&(o[3]||("http:"===o[1]?"80":"443"))===(en[3]||("http:"===en[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=pt.param(d.data,d.traditional)),Q(Ye,d,n,_),2===x)return _;c=pt.event&&d.global,c&&0===pt.active++&&pt.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Ve.test(d.type),r=d.url,d.hasContent||(d.data&&(r=d.url+=(qe.test(r)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Xe.test(r)?r.replace(Xe,"$1_="+Be++):r+(qe.test(r)?"&":"?")+"_="+Be++)),d.ifModified&&(pt.lastModified[r]&&_.setRequestHeader("If-Modified-Since",pt.lastModified[r]),pt.etag[r]&&_.setRequestHeader("If-None-Match",pt.etag[r])),(d.data&&d.hasContent&&d.contentType!==!1||n.contentType)&&_.setRequestHeader("Content-Type",d.contentType),_.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Je+"; q=0.01":""):d.accepts["*"]);for(s in d.headers)_.setRequestHeader(s,d.headers[s]);if(d.beforeSend&&(d.beforeSend.call(p,_,d)===!1||2===x))return _.abort();b="abort";for(s in{success:1,error:1,complete:1})_[s](d[s]);if(u=Q(Ke,d,n,_)){if(_.readyState=1,c&&f.trigger("ajaxSend",[_,d]),2===x)return _;d.async&&d.timeout>0&&(l=t.setTimeout(function(){_.abort("timeout")},d.timeout));try{x=1,u.send(y,i)}catch(t){if(!(x<2))throw t;i(-1,t)}}else i(-1,"No Transport");return _},getJSON:function(t,e,n){return pt.get(t,e,n,"json")},getScript:function(t,e){return pt.get(t,void 0,e,"script")}}),pt.each(["get","post"],function(t,e){pt[e]=function(t,n,i,o){return pt.isFunction(n)&&(o=o||i,i=n,n=void 0),pt.ajax(pt.extend({url:t,type:e,dataType:o,data:n,success:i},pt.isPlainObject(t)&&t))}}),pt._evalUrl=function(t){return pt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pt.fn.extend({wrapAll:function(t){if(pt.isFunction(t))return this.each(function(e){pt(this).wrapAll(t.call(this,e))});if(this[0]){var e=pt(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return pt.isFunction(t)?this.each(function(e){pt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=pt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=pt.isFunction(t);return this.each(function(n){pt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){pt.nodeName(this,"body")||pt(this).replaceWith(this.childNodes)}).end()}}),pt.expr.filters.hidden=function(t){return ht.reliableHiddenOffsets()?t.offsetWidth<=0&&t.offsetHeight<=0&&!t.getClientRects().length:Y(t)},pt.expr.filters.visible=function(t){return!pt.expr.filters.hidden(t)};var nn=/%20/g,on=/\[\]$/,sn=/\r?\n/g,rn=/^(?:submit|button|image|reset|file)$/i,an=/^(?:input|select|textarea|keygen)/i;pt.param=function(t,e){var n,i=[],o=function(t,e){e=pt.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=pt.ajaxSettings&&pt.ajaxSettings.traditional),pt.isArray(t)||t.jquery&&!pt.isPlainObject(t))pt.each(t,function(){o(this.name,this.value)});else for(n in t)K(n,t[n],e,o);return i.join("&").replace(nn,"+")},pt.fn.extend({serialize:function(){return pt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=pt.prop(this,"elements");return t?pt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!pt(this).is(":disabled")&&an.test(this.nodeName)&&!rn.test(t)&&(this.checked||!Ot.test(t))}).map(function(t,e){var n=pt(this).val();return null==n?null:pt.isArray(n)?pt.map(n,function(t){return{name:e.name,value:t.replace(sn,"\r\n")}}):{name:e.name,value:n.replace(sn,"\r\n")}}).get()}}),pt.ajaxSettings.xhr=void 0!==t.ActiveXObject?function(){return this.isLocal?tt():it.documentMode>8?J():/^(get|post|head|put|delete|options)$/i.test(this.type)&&J()||tt()}:J;var ln=0,cn={},un=pt.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in cn)cn[t](void 0,!0)}),ht.cors=!!un&&"withCredentials"in un,un=ht.ajax=!!un,un&&pt.ajaxTransport(function(e){if(!e.crossDomain||ht.cors){var n;return{send:function(i,o){var s,r=e.xhr(),a=++ln;if(r.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)r[s]=e.xhrFields[s];e.mimeType&&r.overrideMimeType&&r.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)void 0!==i[s]&&r.setRequestHeader(s,i[s]+"");r.send(e.hasContent&&e.data||null),n=function(t,i){var s,l,c;if(n&&(i||4===r.readyState))if(delete cn[a],n=void 0,r.onreadystatechange=pt.noop,i)4!==r.readyState&&r.abort();else{c={},s=r.status,"string"==typeof r.responseText&&(c.text=r.responseText);try{l=r.statusText}catch(t){l=""}s||!e.isLocal||e.crossDomain?1223===s&&(s=204):s=c.text?200:404}c&&o(s,l,c,r.getAllResponseHeaders())},e.async?4===r.readyState?t.setTimeout(n):r.onreadystatechange=cn[a]=n:n()},abort:function(){n&&n(void 0,!0)}}}}),pt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return pt.globalEval(t),t}}}),pt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),pt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n=it.head||pt("head")[0]||it.documentElement;return{send:function(i,o){e=it.createElement("script"),e.async=!0,t.scriptCharset&&(e.charset=t.scriptCharset),e.src=t.url,e.onload=e.onreadystatechange=function(t,n){(n||!e.readyState||/loaded|complete/.test(e.readyState))&&(e.onload=e.onreadystatechange=null,e.parentNode&&e.parentNode.removeChild(e),e=null,n||o(200,"success"))},n.insertBefore(e,n.firstChild)},abort:function(){e&&e.onload(void 0,!0)}}}});var hn=[],dn=/(=)\?(?=&|$)|\?\?/;pt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=hn.pop()||pt.expando+"_"+Be++;return this[t]=!0,t}}),pt.ajaxPrefilter("json jsonp",function(e,n,i){var o,s,r,a=e.jsonp!==!1&&(dn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&dn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=pt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(dn,"$1"+o):e.jsonp!==!1&&(e.url+=(qe.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||pt.error(o+" was not called"),r[0]},e.dataTypes[0]="json",s=t[o],t[o]=function(){r=arguments},i.always(function(){void 0===s?pt(t).removeProp(o):t[o]=s,e[o]&&(e.jsonpCallback=n.jsonpCallback,hn.push(o)),r&&pt.isFunction(s)&&s(r[0]),r=s=void 0}),"script"}),pt.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||it;var i=_t.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=v([t],e,o),o&&o.length&&pt(o).remove(),pt.merge([],i.childNodes))};var pn=pt.fn.load;pt.fn.load=function(t,e,n){if("string"!=typeof t&&pn)return pn.apply(this,arguments);var i,o,s,r=this,a=t.indexOf(" ");return a>-1&&(i=pt.trim(t.slice(a,t.length)),t=t.slice(0,a)),pt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),r.length>0&&pt.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(i?pt("<div>").append(pt.parseHTML(t)).find(i):t)}).always(n&&function(t,e){r.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},pt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){pt.fn[e]=function(t){return this.on(e,t)}}),pt.expr.filters.animated=function(t){return pt.grep(pt.timers,function(e){return t===e.elem}).length},pt.offset={setOffset:function(t,e,n){var i,o,s,r,a,l,c,u=pt.css(t,"position"),h=pt(t),d={};"static"===u&&(t.style.position="relative"),a=h.offset(),s=pt.css(t,"top"),l=pt.css(t,"left"),c=("absolute"===u||"fixed"===u)&&pt.inArray("auto",[s,l])>-1,c?(i=h.position(),r=i.top,o=i.left):(r=parseFloat(s)||0,o=parseFloat(l)||0),pt.isFunction(e)&&(e=e.call(t,n,pt.extend({},a))),null!=e.top&&(d.top=e.top-a.top+r),null!=e.left&&(d.left=e.left-a.left+o),"using"in e?e.using.call(t,d):h.css(d)}},pt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){pt.offset.setOffset(this,t,e)});var e,n,i={top:0,left:0},o=this[0],s=o&&o.ownerDocument;if(s)return e=s.documentElement,pt.contains(e,o)?("undefined"!=typeof o.getBoundingClientRect&&(i=o.getBoundingClientRect()),n=et(s),{top:i.top+(n.pageYOffset||e.scrollTop)-(e.clientTop||0),left:i.left+(n.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):i},position:function(){if(this[0]){var t,e,n={top:0,left:0},i=this[0];return"fixed"===pt.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),pt.nodeName(t[0],"html")||(n=t.offset()),n.top+=pt.css(t[0],"borderTopWidth",!0),n.left+=pt.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-pt.css(i,"marginTop",!0),left:e.left-n.left-pt.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&!pt.nodeName(t,"html")&&"static"===pt.css(t,"position");)t=t.offsetParent;
return t||pe})}}),pt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n=/Y/.test(e);pt.fn[t]=function(i){return $t(this,function(t,i,o){var s=et(t);return void 0===o?s?e in s?s[e]:s.document.documentElement[i]:t[i]:void(s?s.scrollTo(n?pt(s).scrollLeft():o,n?o:pt(s).scrollTop()):t[i]=o)},t,i,arguments.length,null)}}),pt.each(["top","left"],function(t,e){pt.cssHooks[e]=F(ht.pixelPosition,function(t,n){if(n)return n=me(t,e),he.test(n)?pt(t).position()[e]+"px":n})}),pt.each({Height:"height",Width:"width"},function(t,e){pt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){pt.fn[i]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),r=n||(i===!0||o===!0?"margin":"border");return $t(this,function(e,n,i){var o;return pt.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?pt.css(e,n,r):pt.style(e,n,i,r)},e,s?i:void 0,s,null)}})}),pt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),pt.fn.size=function(){return this.length},pt.fn.andSelf=pt.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pt});var fn=t.jQuery,mn=t.$;return pt.noConflict=function(e){return t.$===pt&&(t.$=mn),e&&t.jQuery===pt&&(t.jQuery=fn),pt},e||(t.jQuery=t.$=pt),pt}),function(t,e,n){"$:nomunge";function i(i,o){function s(e){t(r).each(function(){var n=t(this);this===e.target||n.has(e.target).length||n.triggerHandler(o,[e.target])})}o=o||i+n;var r=t(),a=i+"."+o+"-special-event";t.event.special[o]={setup:function(){r=r.add(this),1===r.length&&t(e).bind(a,s)},teardown:function(){r=r.not(this),0===r.length&&t(e).unbind(a)},add:function(t){var e=t.handler;t.handler=function(t,n){t.target=n,e.apply(this,arguments)}}}}t.map("click dblclick mousemove mousedown mouseup mouseover mouseout change select submit keydown keypress keyup".split(" "),function(t){i(t)}),i("focusin","focus"+n),i("focusout","blur"+n),t.addOutsideEvent=i}(jQuery,document,"outside"),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t("object"==typeof exports?require("jquery"):window.jQuery||window.Zepto)}(function(t){var e,n,i,o,s,r,a="Close",l="BeforeClose",c="AfterClose",u="BeforeAppend",h="MarkupParse",d="Open",p="Change",f="mfp",m="."+f,g="mfp-ready",v="mfp-removing",y="mfp-prevent-close",w=function(){},x=!!window.jQuery,b=t(window),_=function(t,n){e.ev.on(f+t+m,n)},C=function(e,n,i,o){var s=document.createElement("div");return s.className="mfp-"+e,i&&(s.innerHTML=i),o?n&&n.appendChild(s):(s=t(s),n&&s.appendTo(n)),s},T=function(n,i){e.ev.triggerHandler(f+n,i),e.st.callbacks&&(n=n.charAt(0).toLowerCase()+n.slice(1),e.st.callbacks[n]&&e.st.callbacks[n].apply(e,t.isArray(i)?i:[i]))},k=function(n){return n===r&&e.currTemplate.closeBtn||(e.currTemplate.closeBtn=t(e.st.closeMarkup.replace("%title%",e.st.tClose)),r=n),e.currTemplate.closeBtn},E=function(){t.magnificPopup.instance||(e=new w,e.init(),t.magnificPopup.instance=e)},S=function(){var t=document.createElement("p").style,e=["ms","O","Moz","Webkit"];if(void 0!==t.transition)return!0;for(;e.length;)if(e.pop()+"Transition"in t)return!0;return!1};w.prototype={constructor:w,init:function(){var n=navigator.appVersion;e.isLowIE=e.isIE8=document.all&&!document.addEventListener,e.isAndroid=/android/gi.test(n),e.isIOS=/iphone|ipad|ipod/gi.test(n),e.supportsTransition=S(),e.probablyMobile=e.isAndroid||e.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=t(document),e.popupsCache={}},open:function(n){var o;if(n.isObj===!1){e.items=n.items.toArray(),e.index=0;var r,a=n.items;for(o=0;o<a.length;o++)if(r=a[o],r.parsed&&(r=r.el[0]),r===n.el[0]){e.index=o;break}}else e.items=t.isArray(n.items)?n.items:[n.items],e.index=n.index||0;if(e.isOpen)return void e.updateItemHTML();e.types=[],s="",n.mainEl&&n.mainEl.length?e.ev=n.mainEl.eq(0):e.ev=i,n.key?(e.popupsCache[n.key]||(e.popupsCache[n.key]={}),e.currTemplate=e.popupsCache[n.key]):e.currTemplate={},e.st=t.extend(!0,{},t.magnificPopup.defaults,n),e.fixedContentPos="auto"===e.st.fixedContentPos?!e.probablyMobile:e.st.fixedContentPos,e.st.modal&&(e.st.closeOnContentClick=!1,e.st.closeOnBgClick=!1,e.st.showCloseBtn=!1,e.st.enableEscapeKey=!1),e.bgOverlay||(e.bgOverlay=C("bg").on("click"+m,function(){e.close()}),e.wrap=C("wrap").attr("tabindex",-1).on("click"+m,function(t){e._checkIfClose(t.target)&&e.close()}),e.container=C("container",e.wrap)),e.contentContainer=C("content"),e.st.preloader&&(e.preloader=C("preloader",e.container,e.st.tLoading));var l=t.magnificPopup.modules;for(o=0;o<l.length;o++){var c=l[o];c=c.charAt(0).toUpperCase()+c.slice(1),e["init"+c].call(e)}T("BeforeOpen"),e.st.showCloseBtn&&(e.st.closeBtnInside?(_(h,function(t,e,n,i){n.close_replaceWith=k(i.type)}),s+=" mfp-close-btn-in"):e.wrap.append(k())),e.st.alignTop&&(s+=" mfp-align-top"),e.fixedContentPos?e.wrap.css({overflow:e.st.overflowY,overflowX:"hidden",overflowY:e.st.overflowY}):e.wrap.css({top:b.scrollTop(),position:"absolute"}),(e.st.fixedBgPos===!1||"auto"===e.st.fixedBgPos&&!e.fixedContentPos)&&e.bgOverlay.css({height:i.height(),position:"absolute"}),e.st.enableEscapeKey&&i.on("keyup"+m,function(t){27===t.keyCode&&e.close()}),b.on("resize"+m,function(){e.updateSize()}),e.st.closeOnContentClick||(s+=" mfp-auto-cursor"),s&&e.wrap.addClass(s);var u=e.wH=b.height(),p={};if(e.fixedContentPos&&e._hasScrollBar(u)){var f=e._getScrollbarSize();f&&(p.marginRight=f)}e.fixedContentPos&&(e.isIE7?t("body, html").css("overflow","hidden"):p.overflow="hidden");var v=e.st.mainClass;return e.isIE7&&(v+=" mfp-ie7"),v&&e._addClassToMFP(v),e.updateItemHTML(),T("BuildControls"),t("html").css(p),e.bgOverlay.add(e.wrap).prependTo(e.st.prependTo||t(document.body)),e._lastFocusedEl=document.activeElement,setTimeout(function(){e.content?(e._addClassToMFP(g),e._setFocus()):e.bgOverlay.addClass(g),i.on("focusin"+m,e._onFocusIn)},16),e.isOpen=!0,e.updateSize(u),T(d),n},close:function(){e.isOpen&&(T(l),e.isOpen=!1,e.st.removalDelay&&!e.isLowIE&&e.supportsTransition?(e._addClassToMFP(v),setTimeout(function(){e._close()},e.st.removalDelay)):e._close())},_close:function(){T(a);var n=v+" "+g+" ";if(e.bgOverlay.detach(),e.wrap.detach(),e.container.empty(),e.st.mainClass&&(n+=e.st.mainClass+" "),e._removeClassFromMFP(n),e.fixedContentPos){var o={marginRight:""};e.isIE7?t("body, html").css("overflow",""):o.overflow="",t("html").css(o)}i.off("keyup"+m+" focusin"+m),e.ev.off(m),e.wrap.attr("class","mfp-wrap").removeAttr("style"),e.bgOverlay.attr("class","mfp-bg"),e.container.attr("class","mfp-container"),!e.st.showCloseBtn||e.st.closeBtnInside&&e.currTemplate[e.currItem.type]!==!0||e.currTemplate.closeBtn&&e.currTemplate.closeBtn.detach(),e.st.autoFocusLast&&e._lastFocusedEl&&t(e._lastFocusedEl).focus(),e.currItem=null,e.content=null,e.currTemplate=null,e.prevHeight=0,T(c)},updateSize:function(t){if(e.isIOS){var n=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*n;e.wrap.css("height",i),e.wH=i}else e.wH=t||b.height();e.fixedContentPos||e.wrap.css("height",e.wH),T("Resize")},updateItemHTML:function(){var n=e.items[e.index];e.contentContainer.detach(),e.content&&e.content.detach(),n.parsed||(n=e.parseEl(e.index));var i=n.type;if(T("BeforeChange",[e.currItem?e.currItem.type:"",i]),e.currItem=n,!e.currTemplate[i]){var s=!!e.st[i]&&e.st[i].markup;T("FirstMarkupParse",s),s?e.currTemplate[i]=t(s):e.currTemplate[i]=!0}o&&o!==n.type&&e.container.removeClass("mfp-"+o+"-holder");var r=e["get"+i.charAt(0).toUpperCase()+i.slice(1)](n,e.currTemplate[i]);e.appendContent(r,i),n.preloaded=!0,T(p,n),o=n.type,e.container.prepend(e.contentContainer),T("AfterChange")},appendContent:function(t,n){e.content=t,t?e.st.showCloseBtn&&e.st.closeBtnInside&&e.currTemplate[n]===!0?e.content.find(".mfp-close").length||e.content.append(k()):e.content=t:e.content="",T(u),e.container.addClass("mfp-"+n+"-holder"),e.contentContainer.append(e.content)},parseEl:function(n){var i,o=e.items[n];if(o.tagName?o={el:t(o)}:(i=o.type,o={data:o,src:o.src}),o.el){for(var s=e.types,r=0;r<s.length;r++)if(o.el.hasClass("mfp-"+s[r])){i=s[r];break}o.src=o.el.attr("data-mfp-src"),o.src||(o.src=o.el.attr("href"))}return o.type=i||e.st.type||"inline",o.index=n,o.parsed=!0,e.items[n]=o,T("ElementParse",o),e.items[n]},addGroup:function(t,n){var i=function(i){i.mfpEl=this,e._openClick(i,t,n)};n||(n={});var o="click.magnificPopup";n.mainEl=t,n.items?(n.isObj=!0,t.off(o).on(o,i)):(n.isObj=!1,n.delegate?t.off(o).on(o,n.delegate,i):(n.items=t,t.off(o).on(o,i)))},_openClick:function(n,i,o){var s=void 0!==o.midClick?o.midClick:t.magnificPopup.defaults.midClick;if(s||!(2===n.which||n.ctrlKey||n.metaKey||n.altKey||n.shiftKey)){var r=void 0!==o.disableOn?o.disableOn:t.magnificPopup.defaults.disableOn;if(r)if(t.isFunction(r)){if(!r.call(e))return!0}else if(b.width()<r)return!0;n.type&&(n.preventDefault(),e.isOpen&&n.stopPropagation()),o.el=t(n.mfpEl),o.delegate&&(o.items=i.find(o.delegate)),e.open(o)}},updateStatus:function(t,i){if(e.preloader){n!==t&&e.container.removeClass("mfp-s-"+n),i||"loading"!==t||(i=e.st.tLoading);var o={status:t,text:i};T("UpdateStatus",o),t=o.status,i=o.text,e.preloader.html(i),e.preloader.find("a").on("click",function(t){t.stopImmediatePropagation()}),e.container.addClass("mfp-s-"+t),n=t}},_checkIfClose:function(n){if(!t(n).hasClass(y)){var i=e.st.closeOnContentClick,o=e.st.closeOnBgClick;if(i&&o)return!0;if(!e.content||t(n).hasClass("mfp-close")||e.preloader&&n===e.preloader[0])return!0;if(n===e.content[0]||t.contains(e.content[0],n)){if(i)return!0}else if(o&&t.contains(document,n))return!0;return!1}},_addClassToMFP:function(t){e.bgOverlay.addClass(t),e.wrap.addClass(t)},_removeClassFromMFP:function(t){this.bgOverlay.removeClass(t),e.wrap.removeClass(t)},_hasScrollBar:function(t){return(e.isIE7?i.height():document.body.scrollHeight)>(t||b.height())},_setFocus:function(){(e.st.focus?e.content.find(e.st.focus).eq(0):e.wrap).focus()},_onFocusIn:function(n){if(n.target!==e.wrap[0]&&!t.contains(e.wrap[0],n.target))return e._setFocus(),!1},_parseMarkup:function(e,n,i){var o;i.data&&(n=t.extend(i.data,n)),T(h,[e,n,i]),t.each(n,function(n,i){if(void 0===i||i===!1)return!0;if(o=n.split("_"),o.length>1){var s=e.find(m+"-"+o[0]);if(s.length>0){var r=o[1];"replaceWith"===r?s[0]!==i[0]&&s.replaceWith(i):"img"===r?s.is("img")?s.attr("src",i):s.replaceWith(t("<img>").attr("src",i).attr("class",s.attr("class"))):s.attr(o[1],i)}}else e.find(m+"-"+n).html(i)})},_getScrollbarSize:function(){if(void 0===e.scrollbarSize){var t=document.createElement("div");t.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(t),e.scrollbarSize=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return e.scrollbarSize}},t.magnificPopup={instance:null,proto:w.prototype,modules:[],open:function(e,n){return E(),e=e?t.extend(!0,{},e):{},e.isObj=!0,e.index=n||0,this.instance.open(e)},close:function(){return t.magnificPopup.instance&&t.magnificPopup.instance.close()},registerModule:function(e,n){n.options&&(t.magnificPopup.defaults[e]=n.options),t.extend(this.proto,n.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},t.fn.magnificPopup=function(n){E();var i=t(this);if("string"==typeof n)if("open"===n){var o,s=x?i.data("magnificPopup"):i[0].magnificPopup,r=parseInt(arguments[1],10)||0;s.items?o=s.items[r]:(o=i,s.delegate&&(o=o.find(s.delegate)),o=o.eq(r)),e._openClick({mfpEl:o},i,s)}else e.isOpen&&e[n].apply(e,Array.prototype.slice.call(arguments,1));else n=t.extend(!0,{},n),x?i.data("magnificPopup",n):i[0].magnificPopup=n,e.addGroup(i,n);return i};var D,z,A,F="inline",N=function(){A&&(z.after(A.addClass(D)).detach(),A=null)};t.magnificPopup.registerModule(F,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){e.types.push(F),_(a+"."+F,function(){N()})},getInline:function(n,i){if(N(),n.src){var o=e.st.inline,s=t(n.src);if(s.length){var r=s[0].parentNode;r&&r.tagName&&(z||(D=o.hiddenClass,z=C(D),D="mfp-"+D),A=s.after(z).detach().removeClass(D)),e.updateStatus("ready")}else e.updateStatus("error",o.tNotFound),s=t("<div>");return n.inlineElement=s,s}return e.updateStatus("ready"),e._parseMarkup(i,{},n),i}}});var j,P="ajax",L=function(){j&&t(document.body).removeClass(j)},H=function(){L(),e.req&&e.req.abort()};t.magnificPopup.registerModule(P,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){e.types.push(P),j=e.st.ajax.cursor,_(a+"."+P,H),_("BeforeChange."+P,H)},getAjax:function(n){j&&t(document.body).addClass(j),e.updateStatus("loading");var i=t.extend({url:n.src,success:function(i,o,s){var r={data:i,xhr:s};T("ParseAjax",r),e.appendContent(t(r.data),P),n.finished=!0,L(),e._setFocus(),setTimeout(function(){e.wrap.addClass(g)},16),e.updateStatus("ready"),T("AjaxContentAdded")},error:function(){L(),n.finished=n.loadError=!0,e.updateStatus("error",e.st.ajax.tError.replace("%url%",n.src))}},e.st.ajax.settings);return e.req=t.ajax(i),""}}});var I,M=function(n){if(n.data&&void 0!==n.data.title)return n.data.title;var i=e.st.image.titleSrc;if(i){if(t.isFunction(i))return i.call(e,n);if(n.el)return n.el.attr(i)||""}return""};t.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var n=e.st.image,i=".image";e.types.push("image"),_(d+i,function(){"image"===e.currItem.type&&n.cursor&&t(document.body).addClass(n.cursor)}),_(a+i,function(){n.cursor&&t(document.body).removeClass(n.cursor),b.off("resize"+m)}),_("Resize"+i,e.resizeImage),e.isLowIE&&_("AfterChange",e.resizeImage)},resizeImage:function(){var t=e.currItem;if(t&&t.img&&e.st.image.verticalFit){var n=0;e.isLowIE&&(n=parseInt(t.img.css("padding-top"),10)+parseInt(t.img.css("padding-bottom"),10)),t.img.css("max-height",e.wH-n)}},_onImageHasSize:function(t){t.img&&(t.hasSize=!0,I&&clearInterval(I),t.isCheckingImgSize=!1,T("ImageHasSize",t),t.imgHidden&&(e.content&&e.content.removeClass("mfp-loading"),t.imgHidden=!1))},findImageSize:function(t){var n=0,i=t.img[0],o=function(s){I&&clearInterval(I),I=setInterval(function(){return i.naturalWidth>0?void e._onImageHasSize(t):(n>200&&clearInterval(I),n++,void(3===n?o(10):40===n?o(50):100===n&&o(500)))},s)};o(1)},getImage:function(n,i){var o=0,s=function(){n&&(n.img[0].complete?(n.img.off(".mfploader"),n===e.currItem&&(e._onImageHasSize(n),e.updateStatus("ready")),n.hasSize=!0,n.loaded=!0,T("ImageLoadComplete")):(o++,o<200?setTimeout(s,100):r()))},r=function(){n&&(n.img.off(".mfploader"),n===e.currItem&&(e._onImageHasSize(n),e.updateStatus("error",a.tError.replace("%url%",n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},a=e.st.image,l=i.find(".mfp-img");if(l.length){var c=document.createElement("img");c.className="mfp-img",n.el&&n.el.find("img").length&&(c.alt=n.el.find("img").attr("alt")),n.img=t(c).on("load.mfploader",s).on("error.mfploader",r),c.src=n.src,l.is("img")&&(n.img=n.img.clone()),c=n.img[0],c.naturalWidth>0?n.hasSize=!0:c.width||(n.hasSize=!1)}return e._parseMarkup(i,{title:M(n),img_replaceWith:n.img},n),e.resizeImage(),n.hasSize?(I&&clearInterval(I),n.loadError?(i.addClass("mfp-loading"),e.updateStatus("error",a.tError.replace("%url%",n.src))):(i.removeClass("mfp-loading"),e.updateStatus("ready")),i):(e.updateStatus("loading"),n.loading=!0,n.hasSize||(n.imgHidden=!0,i.addClass("mfp-loading"),e.findImageSize(n)),i)}}});var $,O=function(){return void 0===$&&($=void 0!==document.createElement("p").style.MozTransform),$};t.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(t){return t.is("img")?t:t.find("img")}},proto:{initZoom:function(){var t,n=e.st.zoom,i=".zoom";if(n.enabled&&e.supportsTransition){var o,s,r=n.duration,c=function(t){var e=t.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+n.duration/1e3+"s "+n.easing,o={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},s="transition";return o["-webkit-"+s]=o["-moz-"+s]=o["-o-"+s]=o[s]=i,e.css(o),e},u=function(){e.content.css("visibility","visible")};_("BuildControls"+i,function(){if(e._allowZoom()){if(clearTimeout(o),e.content.css("visibility","hidden"),t=e._getItemToZoom(),!t)return void u();s=c(t),s.css(e._getOffset()),e.wrap.append(s),o=setTimeout(function(){s.css(e._getOffset(!0)),o=setTimeout(function(){u(),setTimeout(function(){s.remove(),t=s=null,T("ZoomAnimationEnded")},16)},r)},16)}}),_(l+i,function(){if(e._allowZoom()){if(clearTimeout(o),e.st.removalDelay=r,!t){if(t=e._getItemToZoom(),!t)return;s=c(t)}s.css(e._getOffset(!0)),e.wrap.append(s),e.content.css("visibility","hidden"),setTimeout(function(){s.css(e._getOffset())},16)}}),_(a+i,function(){e._allowZoom()&&(u(),s&&s.remove(),t=null)})}},_allowZoom:function(){return"image"===e.currItem.type},_getItemToZoom:function(){return!!e.currItem.hasSize&&e.currItem.img},_getOffset:function(n){var i;i=n?e.currItem.img:e.st.zoom.opener(e.currItem.el||e.currItem);var o=i.offset(),s=parseInt(i.css("padding-top"),10),r=parseInt(i.css("padding-bottom"),10);o.top-=t(window).scrollTop()-s;var a={width:i.width(),height:(x?i.innerHeight():i[0].offsetHeight)-r-s};return O()?a["-moz-transform"]=a.transform="translate("+o.left+"px,"+o.top+"px)":(a.left=o.left,a.top=o.top),a}}});var B="iframe",q="//about:blank",W=function(t){if(e.currTemplate[B]){var n=e.currTemplate[B].find("iframe");n.length&&(t||(n[0].src=q),e.isIE8&&n.css("display",t?"block":"none"))}};t.magnificPopup.registerModule(B,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){e.types.push(B),_("BeforeChange",function(t,e,n){e!==n&&(e===B?W():n===B&&W(!0))}),_(a+"."+B,function(){W()})},getIframe:function(n,i){var o=n.src,s=e.st.iframe;t.each(s.patterns,function(){if(o.indexOf(this.index)>-1)return this.id&&(o="string"==typeof this.id?o.substr(o.lastIndexOf(this.id)+this.id.length,o.length):this.id.call(this,o)),o=this.src.replace("%id%",o),!1});var r={};return s.srcAction&&(r[s.srcAction]=o),e._parseMarkup(i,r,n),e.updateStatus("ready"),i}}});var R=function(t){var n=e.items.length;return t>n-1?t-n:t<0?n+t:t},X=function(t,e,n){return t.replace(/%curr%/gi,e+1).replace(/%total%/gi,n)};t.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var n=e.st.gallery,o=".mfp-gallery";return e.direction=!0,!(!n||!n.enabled)&&(s+=" mfp-gallery",_(d+o,function(){n.navigateByImgClick&&e.wrap.on("click"+o,".mfp-img",function(){if(e.items.length>1)return e.next(),!1}),i.on("keydown"+o,function(t){37===t.keyCode?e.prev():39===t.keyCode&&e.next()})}),_("UpdateStatus"+o,function(t,n){n.text&&(n.text=X(n.text,e.currItem.index,e.items.length))}),_(h+o,function(t,i,o,s){var r=e.items.length;o.counter=r>1?X(n.tCounter,s.index,r):""}),_("BuildControls"+o,function(){if(e.items.length>1&&n.arrows&&!e.arrowLeft){var i=n.arrowMarkup,o=e.arrowLeft=t(i.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,"left")).addClass(y),s=e.arrowRight=t(i.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,"right")).addClass(y);o.click(function(){e.prev()}),s.click(function(){e.next()}),e.container.append(o.add(s))}}),_(p+o,function(){e._preloadTimeout&&clearTimeout(e._preloadTimeout),e._preloadTimeout=setTimeout(function(){e.preloadNearbyImages(),e._preloadTimeout=null},16)}),void _(a+o,function(){i.off(o),e.wrap.off("click"+o),e.arrowRight=e.arrowLeft=null}))},next:function(){e.direction=!0,e.index=R(e.index+1),e.updateItemHTML()},prev:function(){e.direction=!1,e.index=R(e.index-1),e.updateItemHTML()},goTo:function(t){e.direction=t>=e.index,e.index=t,e.updateItemHTML()},preloadNearbyImages:function(){var t,n=e.st.gallery.preload,i=Math.min(n[0],e.items.length),o=Math.min(n[1],e.items.length);for(t=1;t<=(e.direction?o:i);t++)e._preloadItem(e.index+t);for(t=1;t<=(e.direction?i:o);t++)e._preloadItem(e.index-t)},_preloadItem:function(n){if(n=R(n),!e.items[n].preloaded){var i=e.items[n];i.parsed||(i=e.parseEl(n)),T("LazyLoad",i),"image"===i.type&&(i.img=t('<img class="mfp-img" />').on("load.mfploader",function(){i.hasSize=!0}).on("error.mfploader",function(){i.hasSize=!0,i.loadError=!0,T("LazyLoadError",i)}).attr("src",i.src)),i.preloaded=!0}}}});var Q="retina";t.magnificPopup.registerModule(Q,{options:{replaceSrc:function(t){return t.src.replace(/\.\w+$/,function(t){return"@2x"+t})},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var t=e.st.retina,n=t.ratio;n=isNaN(n)?n():n,n>1&&(_("ImageHasSize."+Q,function(t,e){e.img.css({"max-width":e.img[0].naturalWidth/n,width:"100%"})}),_("ElementParse."+Q,function(e,i){i.src=t.replaceSrc(i,n)}))}}}}),E()}),function(t,e,n,i){function o(e,n){this.settings=null,this.options=t.extend({},o.Defaults,n),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,n){this._handlers[n]=t.proxy(this[n],this)},this)),t.each(o.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(o.Workers,t.proxy(function(e,n){this._pipe.push({filter:n.filter,run:t.proxy(n.run,this)})},this)),this.setup(),this.initialize()}o.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},o.Width={Default:"default",Inner:"inner",Outer:"outer"},o.Type={Event:"event",State:"state"},o.Plugins={},o.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,o={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(o),t.css=o}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,o=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=n>1||t.items.merge,s[i]=o?e*n:this._items[i].width();this._widths=s}},{filter:["items","settings"],run:function(){var e=[],n=this._items,i=this.settings,o=Math.max(2*i.items,4),s=2*Math.ceil(n.length/2),r=i.loop&&n.length?i.rewind?o:Math.max(o,s):0,a="",l="";for(r/=2;r>0;)e.push(this.normalize(e.length/2,!0)),a+=n[e[e.length-1]][0].outerHTML,e.push(this.normalize(n.length-1-(e.length-1)/2,!0)),l=n[e[e.length-1]][0].outerHTML+l,r-=1;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,o=0,s=[];++n<e;)i=s[n-1]||0,o=this._widths[this.relative(n)]+this.settings.margin,s.push(i+o*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,o=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,r=this.coordinates(this.current())+s,a=r+this.width()*o,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+s*o,(this.op(t,"<=",r)&&this.op(t,">",a)||this.op(e,"<",r)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],o.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+">",{class:this.settings.stageClass}).wrap(t("<div/>",{class:this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},o.prototype.initializeItems=function(){var e=this.$element.find(".owl-item");return e.length?(this._items=e.get().map(function(e){return t(e)}),this._mergers=this._items.map(function(){return 1}),void this.refresh()):(this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),void this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass))},o.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var t,e,n;t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,n=this.$element.children(e).width(),t.length&&n<=0&&this.preloadAutoWidthImages(t)}this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},o.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},o.prototype.setup=function(){var e=this.viewport(),n=this.options.responsive,i=-1,o=null;n?(t.each(n,function(t){t<=e&&t>i&&(i=Number(t))}),o=t.extend({},this.options,n[i]),"function"==typeof o.stagePadding&&(o.stagePadding=o.stagePadding()),delete o.responsive,o.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):o=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:o}}),this._breakpoint=i,this.settings=o,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},o.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},o.prototype.prepare=function(e){var n=this.trigger("prepare",{content:e});return n.data||(n.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:n.data}),n.data},o.prototype.update=function(){for(var e=0,n=this._pipe.length,i=t.proxy(function(t){return this[t]},this._invalidated),o={};e<n;)(this._invalidated.all||t.grep(this._pipe[e].filter,i).length>0)&&this._pipe[e].run(o),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},o.prototype.width=function(t){switch(t=t||o.Width.Default){case o.Width.Inner:case o.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},o.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},o.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},o.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},o.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),this.settings.responsive!==!1&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},o.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),i={x:i[16===i.length?12:4],y:i[16===i.length?13:5]}):(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),
this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},o.prototype.onDragMove=function(t){var e=null,n=null,i=null,o=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,o);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*o.x/5:0,s.x=Math.max(Math.min(s.x,e+i),n+i)),this._drag.stage.current=s,this.animate(s.x))},o.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),o=this._drag.stage.current,s=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(o.x,0!==i.x?s:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=s,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},o.prototype.closest=function(e,n){var o=-1,s=30,r=this.width(),a=this.coordinates();return this.settings.freeDrag||t.each(a,t.proxy(function(t,l){return"left"===n&&e>l-s&&e<l+s?o=t:"right"===n&&e>l-r-s&&e<l-r+s?o=t+1:this.op(e,"<",l)&&this.op(e,">",a[t+1]!==i?a[t+1]:l-r)&&(o="left"===n?t+1:t),o===-1},this)),this.settings.loop||(this.op(e,">",a[this.minimum()])?o=e=this.minimum():this.op(e,"<",a[this.maximum()])&&(o=e=this.maximum())),o},o.prototype.animate=function(e){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):n?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},o.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},o.prototype.current=function(t){if(t===i)return this._current;if(0===this._items.length)return i;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==i&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},o.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},o.prototype.reset=function(t){t=this.normalize(t),t!==i&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},o.prototype.normalize=function(t,e){var n=this._items.length,o=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=i:(t<0||t>=n+o)&&(t=((t-o/2)%n+n)%n+o/2),t},o.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},o.prototype.maximum=function(t){var e,n,i,o=this.settings,s=this._coordinates.length;if(o.loop)s=this._clones.length/2+this._items.length-1;else if(o.autoWidth||o.merge){if(e=this._items.length)for(n=this._items[--e].width(),i=this.$element.width();e--&&(n+=this._items[e].width()+this.settings.margin,!(n>i)););s=e+1}else s=o.center?this._items.length-1:this._items.length-o.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},o.prototype.minimum=function(t){return t?0:this._clones.length/2},o.prototype.items=function(t){return t===i?this._items.slice():(t=this.normalize(t,!0),this._items[t])},o.prototype.mergers=function(t){return t===i?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},o.prototype.clones=function(e){var n=this._clones.length/2,o=n+this._items.length,s=function(t){return t%2===0?o+t/2:n-(t+1)/2};return e===i?t.map(this._clones,function(t,e){return s(e)}):t.map(this._clones,function(t,n){return t===e?s(n):null})},o.prototype.speed=function(t){return t!==i&&(this._speed=t),this._speed},o.prototype.coordinates=function(e){var n,o=1,s=e-1;return e===i?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(o=-1,s=e+1),n=this._coordinates[e],n+=(this.width()-n+(this._coordinates[s]||0))/2*o):n=this._coordinates[s]||0,n=Math.ceil(n))},o.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},o.prototype.to=function(t,e){var n=this.current(),i=null,o=t-this.relative(n),s=(o>0)-(o<0),r=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(o)>r/2&&(o+=s*-1*r),t=n+o,i=((t-a)%r+r)%r+a,i!==t&&i-o<=l&&i-o>0&&(n=i-o,t=i,this.reset(n))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.isVisible()&&this.update()},o.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},o.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},o.prototype.onTransitionEnd=function(t){return(t===i||(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},o.prototype.viewport=function(){var i;return this.options.responsiveBaseElement!==e?i=t(this.options.responsiveBaseElement).width():e.innerWidth?i=e.innerWidth:n.documentElement&&n.documentElement.clientWidth?i=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),i},o.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},o.prototype.add=function(e,n){var o=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:n}),e=this.prepare(e),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[n-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(e),this._items.splice(n,0,e),this._mergers.splice(n,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[o]&&this.reset(this._items[o].index()),this.invalidate("items"),this.trigger("added",{content:e,position:n})},o.prototype.remove=function(t){t=this.normalize(t,!0),t!==i&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},o.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,n){this.enter("pre-loading"),n=t(n),t(new Image).one("load",t.proxy(function(t){n.attr("src",t.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},o.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),this.settings.responsive!==!1&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},o.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?t>n:t<n;case">":return i?t<n:t>n;case">=":return i?t<=n:t>=n;case"<=":return i?t>=n:t<=n}},o.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},o.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},o.prototype.trigger=function(e,n,i,s,r){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,i],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",i||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,n));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:o.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},o.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===i&&(this._states.current[e]=0),this._states.current[e]++},this))},o.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},o.prototype.register=function(e){if(e.type===o.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var n=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!n||!n.apply||t.namespace&&t.namespace.indexOf("owl")!==-1?t.namespace&&t.namespace.indexOf("owl")>-1:n.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===o.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(n,i){return t.inArray(n,this._states.tags[e.name])===i},this)))},o.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},o.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},o.prototype.pointer=function(t){var n={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(n.x=t.pageX,n.y=t.pageY):(n.x=t.clientX,n.y=t.clientY),n},o.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},o.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=t(this),s=i.data("owl.carousel");s||(s=new o(this,"object"==typeof e&&e),i.data("owl.carousel",s),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,n){s.register({type:o.Type.Event,name:n}),s.$element.on(n+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([n]),s[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},s))})),"string"==typeof e&&"_"!==e.charAt(0)&&s[e].apply(s,n)})},t.fn.owlCarousel.Constructor=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers)};o.Defaults={autoRefresh:!0,autoRefreshInterval:500},o.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},o.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},o.prototype.destroy=function(){var t,n;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type)){var n=this._core.settings,o=n.center&&Math.ceil(n.items/2)||n.items,s=n.center&&o*-1||0,r=(e.property&&e.property.value!==i?e.property.value:this._core.current())+s,a=this._core.clones().length,l=t.proxy(function(t,e){this.load(e)},this);for(n.lazyLoadEager>0&&(o+=n.lazyLoadEager,n.loop&&(r-=n.lazyLoadEager,o++));s++<o;)this.load(a/2+this._core.relative(r)),a&&t.each(this._core.clones(this._core.relative(r)),l),r++}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers)};o.Defaults={lazyLoad:!1,lazyLoadEager:0},o.prototype.load=function(n){var i=this._core.$stage.children().eq(n),o=i&&i.find(".owl-lazy");!o||t.inArray(i.get(0),this._loaded)>-1||(o.each(t.proxy(function(n,i){var o,s=t(i),r=e.devicePixelRatio>1&&s.attr("data-src-retina")||s.attr("data-src")||s.attr("data-srcset");this._core.trigger("load",{element:s,url:r},"lazy"),s.is("img")?s.one("load.owl.lazy",t.proxy(function(){s.css("opacity",1),this._core.trigger("loaded",{element:s,url:r},"lazy")},this)).attr("src",r):s.is("source")?s.one("load.owl.lazy",t.proxy(function(){this._core.trigger("loaded",{element:s,url:r},"lazy")},this)).attr("srcset",r):(o=new Image,o.onload=t.proxy(function(){s.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:s,url:r},"lazy")},this),o.src=r)},this)),this._loaded.push(i.get(0)))},o.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(n){this._core=n,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var i=this;t(e).on("load",function(){i._core.settings.autoHeight&&i.update()}),t(e).resize(function(){i._core.settings.autoHeight&&(null!=i._intervalId&&clearTimeout(i._intervalId),i._intervalId=setTimeout(function(){i.update()},250))})};o.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},o.prototype.update=function(){var e=this._core._current,n=e+this._core.settings.items,i=this._core.settings.lazyLoad,o=this._core.$stage.children().toArray().slice(e,n),s=[],r=0;t.each(o,function(e,n){s.push(t(n).height())}),r=Math.max.apply(null,s),r<=1&&i&&this._previousHeight&&(r=this._previousHeight),this._previousHeight=r,this._core.$stage.parent().height(r).addClass(this._core.settings.autoHeightClass)},o.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,t(e.content)))}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};o.Defaults={video:!1,videoHeight:!1,videoWidth:!1},o.prototype.fetch=function(t,e){var n=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),o=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,r=t.attr("href");if(!r)throw new Error("Missing video URL.");if(i=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),i[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[r]={type:n,id:i,width:o,height:s},e.attr("data-video",r),this.thumbnail(t,this._videos[r])},o.prototype.thumbnail=function(e,n){var i,o,s,r=n.width&&n.height?"width:"+n.width+"px;height:"+n.height+"px;":"",a=e.find("img"),l="src",c="",u=this._core.settings,h=function(n){o='<div class="owl-video-play-icon"></div>',i=u.lazyLoad?t("<div/>",{class:"owl-video-tn "+c,srcType:n}):t("<div/>",{class:"owl-video-tn",style:"opacity:1;background-image:url("+n+")"}),e.after(i),e.after(o)};return e.wrap(t("<div/>",{class:"owl-video-wrapper",style:r})),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length?(h(a.attr(l)),a.remove(),!1):void("youtube"===n.type?(s="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",h(s)):"vimeo"===n.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t[0].thumbnail_large,h(s)}}):"vzaar"===n.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t.framegrab_url,h(s)}}))},o.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},o.prototype.play=function(e){var n,i,o=t(e.target),s=o.closest("."+this._core.settings.itemClass),r=this._videos[s.attr("data-video")],a=r.width||"100%",l=r.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),s=this._core.items(this._core.relative(s.index())),this._core.reset(s.index()),n=t('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'),n.attr("height",l),n.attr("width",a),"youtube"===r.type?n.attr("src","//www.youtube.com/embed/"+r.id+"?autoplay=1&rel=0&v="+r.id):"vimeo"===r.type?n.attr("src","//player.vimeo.com/video/"+r.id+"?autoplay=1"):"vzaar"===r.type&&n.attr("src","//view.vzaar.com/"+r.id+"/player?autoplay=true"),i=t(n).wrap('<div class="owl-video-frame" />').insertAfter(s.find(".owl-video")),this._playing=s.addClass("owl-video-playing"))},o.prototype.isInFullScreen=function(){var e=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},o.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this.core=e,this.core.options=t.extend({},o.Defaults,this.core.options),this.swapping=!0,this.previous=i,this.next=i,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};o.Defaults={animateOut:!1,animateIn:!1},o.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,n=t.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),o=this.core.$stage.children().eq(this.next),s=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(t.support.animation.end,n).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(r)),s&&o.one(t.support.animation.end,n).addClass("animated owl-animated-in").addClass(s))}},o.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},o.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},o.Defaults,this._core.options)};o.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},o.prototype._next=function(i){this._call=e.setTimeout(t.proxy(this._next,this,i),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||n.hidden||this._core.next(i||this._core.settings.autoplaySpeed)},o.prototype.read=function(){return(new Date).getTime()-this._time},o.prototype.play=function(n,i){var o;this._core.is("rotating")||this._core.enter("rotating"),n=n||this._core.settings.autoplayTimeout,o=Math.min(this._time%(this._timeout||n),n),this._paused?(this._time=this.read(),this._paused=!1):e.clearTimeout(this._call),this._time+=this.read()%n-o,this._timeout=n,this._call=e.setTimeout(t.proxy(this._next,this,i),n-o)},o.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,e.clearTimeout(this._call),this._core.leave("rotating"))},o.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,e.clearTimeout(this._call))},o.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var o=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this.$element.on(this._handlers)};o.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},o.prototype.initialize=function(){var e,n=this._core.settings;this._controls.$relative=(n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=t("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[t('<button role="button">').addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?t(n.dotsContainer):t("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",t.proxy(function(e){var i=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},o.prototype.destroy=function(){var t,e,n,i,o;o=this._core.settings;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&o.navContainer?this._controls[e].html(""):this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},o.prototype.update=function(){var t,e,n,i=this._core.clones().length/2,o=i+this._core.items().length,s=this._core.maximum(!0),r=this._core.settings,a=r.center||r.autoWidth||r.dotsData?1:r.dotsEach||r.items;if("page"!==r.slideBy&&(r.slideBy=Math.min(r.slideBy,r.items)),r.dots||"page"==r.slideBy)for(this._pages=[],t=i,e=0,n=0;t<o;t++){if(e>=a||0===e){if(this._pages.push({start:Math.min(s,t-i),end:t-i+a-1}),Math.min(s,t-i)===s)break;e=0,++n}e+=this._core.mergers(this._core.relative(t))}},o.prototype.draw=function(){var e,n=this._core.settings,i=this._core.items().length<=n.items,o=this._core.relative(this._core.current()),s=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!s&&o<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!s&&o>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(e=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},o.prototype.onTrigger=function(e){var n=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},o.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,n){return t.start<=e&&t.end>=e},this)).pop()},o.prototype.getPosition=function(e){var n,i,o=this._core.settings;return"page"==o.slideBy?(n=t.inArray(this.current(),this._pages),i=this._pages.length,e?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,e?n+=o.slideBy:n-=o.slideBy),n},o.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},o.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},o.prototype.to=function(e,n,i){var o;!i&&this._pages.length?(o=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%o+o)%o].start,n)):t.proxy(this._overrides.to,this._core)(e,n)},t.fn.owlCarousel.Constructor.Plugins.Navigation=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var o=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(n){
n.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=e.content}},this),"changed.owl.carousel":t.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),o=t.map(this._hashes,function(t,e){return t===i?e:null}).join();if(!o||e.location.hash.slice(1)===o)return;e.location.hash=o}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var n=e.location.hash.substring(1),o=this._core.$stage.children(),s=this._hashes[n]&&o.index(this._hashes[n]);s!==i&&s!==this._core.current()&&this._core.to(this._core.relative(s),!1,!0)},this))};o.Defaults={URLhashListener:!1},o.prototype.destroy=function(){var n,i;t(e).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){function o(e,n){var o=!1,s=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(s+" ")+s).split(" "),function(t,e){if(r[e]!==i)return o=!n||e,!1}),o}function s(t){return o(t,!0)}var r=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c={csstransforms:function(){return!!o("transform")},csstransforms3d:function(){return!!o("perspective")},csstransitions:function(){return!!o("transition")},cssanimations:function(){return!!o("animation")}};c.csstransitions()&&(t.support.transition=new String(s("transition")),t.support.transition.end=l.transition.end[t.support.transition]),c.cssanimations()&&(t.support.animation=new String(s("animation")),t.support.animation.end=l.animation.end[t.support.animation]),c.csstransforms()&&(t.support.transform=new String(s("transform")),t.support.transform3d=c.csstransforms3d())}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){t.cdr=t.cdr||{};var o=0;t.fn.getId=function(t){var e=this.attr("id");if(!e){do e=(t?t+"-":"gen-id-")+o++;while(n.getElementById(e));this.attr("id",e)}return e},t("window").load(function(){t("html").addClass("js_loaded")});var s=navigator.userAgent,r={opera:/Opera M(ob|in)i/i,androidMobile:/Android.+mobile/i,android:/Android/i,iosMobile:/iPhone|iPod/i,ios:/iPhone|iPod|iPad/i,ieMobile:/IEMobile/i,blackberry:/BlackBerry/i,other:/kindle|meego.+mobile|symbian|maemo|palm|hiptop|netfront|fennec|psp|mobile|pocket/i};t.cdr.isSpecialDevice=!1,t.cdr.specialDevices={};var a=t.cdr.specialDevices;for(var l in r){if("other"==l&&t.cdr.isSpecialDevice)break;a[l]=!!s.match(r[l]),a[l]&&(t.cdr.isSpecialDevice=!0)}t.cdr.isTablet=function(){var t=navigator.userAgent;return!!(t.match(/iP(a|ro)d/i)||t.match(/tablet/i)&&!t.match(/RX-34/i)||t.match(/FOLIO/i))||(!(!t.match(/Linux/i)||!t.match(/Android/i)||t.match(/Fennec|mobi|HTC Magic|HTCX06HT|Nexus One|SC-02B|fone 945/i))||(!!(t.match(/Kindle/i)||t.match(/Mac OS/i)&&t.match(/Silk/i)||t.match(/AppleWebKit/i)&&t.match(/Silk/i)&&!t.match(/Playstation Vita/i))||!!(t.match(/GT-P10|SC-01C|SHW-M180S|SGH-T849|SCH-I800|SHW-M180L|SPH-P100|SGH-I987|zt180|HTC( Flyer|_Flyer)|Sprint ATP51|ViewPad7|pandigital(sprnova|nova)|Ideos S7|Dell Streak 7|Advent Vega|A101IT|A70BHT|MID7015|Next2|nook/i)||t.match(/MB511/i)&&t.match(/RUTEM/i))))},t.cdr.portrait=function(){return e.innerHeight/e.innerWidth>1},t.cdr.landscape=function(){return e.innerHeight/e.innerWidth<1},t.cdr.isMobile=t.cdr.isSpecialDevice&&n.documentElement&&n.documentElement.clientWidth<769;var c=function(){var t=s.match(/(opera[\s\/]|opr[\s\/]|Version\/)(\d+(\.\d+)?)/i);return t&&t[2]?t[2]:null}(),u=parseInt(c,10);t.cdr.badFixedPositions=t.cdr.specialDevices.ios&&u<8||t.cdr.specialDevices.android&&u<3,t.cdr.browserTransforms=function(){for(var t=n.createElement("div"),e="Transform",i=[e.toLowerCase(),"O"+e,"ms"+e,"Webkit"+e,"Moz"+e],o=0;o<i.length;o++)if(i[o]in t.style)return!0;return!1}(),t.cdr.unCamelCase=function(t){return t.replace(/\W+/g,"-").replace(/([a-z\d])([A-Z])/g,"$1-$2").toLowerCase()},t.cdr.camelCase=function(t){return t.replace(/\W+(.)/g,function(t,e){return e.toUpperCase()})},t.cdr.escapeRegex=function(t){return(t+"").replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]","g"),"\\$&")},t.cdr.nextFormField=function(e,n){n=1*n||1;var i=t(e).closest("form").find(":input:visible, .cdr-focusable-element"),o=i.eq(i.index(e)+n);try{o.focus(),o.hasClass("cdr-focusable-element-click")&&o.trigger("click")}catch(t){}},t.cdr.isValidEmailAddress=function(t){var e=/^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;return e.test(t)},t.cdr.queryParameter=function(t){var n=null;return n=URLSearchParams!==i?function(t){var n=new URLSearchParams(e.location.search);return n.get(t)}:function(t){t=t.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var e=new RegExp("[\\?&]"+t+"=([^&#]*)"),n=e.exec(location.search);return null===n?"":decodeURIComponent(n[1].replace(/\+/g," "))},n?n(t):null},t.fn.cssAnimationClass=function(e,n){t(this).removeClass(e).addClass(e).one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",function(){t(this).removeClass(e),n()})},t.fn.frame=function(e){var n=t(this),i=t("<div>").appendTo("body").css({borderColor:e||"#999",position:"absolute",zIndex:700,left:n.offset().left+"px",top:n.offset().top+"px",pointerEvents:"none"}).width(n.outerWidth()).height(n.outerHeight()).cssAnimationClass("cdr-animate-frame",function(){i&&i.length&&i.remove()})},t.fn.removeTextNodes=function(){if(this&&t(this).length&&t(this).first().length){var e=t(this).first(),n=t("<"+e[0].nodeName+">"),i=t(">*",e);i.appendTo(n),e.empty(),i.appendTo(e)}},t.fn.onScreenZone=function(n){n=Math.max(0,Math.min(1,n||1));var i=t(e),o=i.scrollTop(),s=o+this.outerHeight(),r=o+i.height()*n,a=this.offset().top,l=a+this.outerHeight();return!(r<a||s>l)},t.fn.scrollToElement=function(n,i,o){n=Math.max(0,Math.min(1,n||1)),i=!i||i>n?n/2:i,this.onScreenZone(n)||t("html, body").stop().animate({scrollTop:this.offset().top-t(e).height()*i},o||500)},Function.prototype.defer=function(t,n,i){var o=this;return i=i||[],e.setTimeout(function(){o.apply(n,i)},t)}}(jQuery,window,document),$(document).ready(function(){$.cdr=$.cdr||{},$.cdr.wEvents=$("body").wEvents({})}),!function(t,e,n,i){"use strict";var o=function(i,o){this.options=t.extend({},this.defaults,o),this.element=t(i),this.window=t(e),this.document=t(n),this.size={width:0,height:0,screen:null,orientation:null},this.resize={width:null,height:null},this.scroll={top:0,direction:null},this.agent=[],this.on=this._on,this.is=function(t){return t===this.size.screen||t===this.size.orientation},this.mobile=function(t){return t?-1!==this.agent.indexOf(t):this.agent.length>0},this.body=function(t){return t?this.element.find(t):this.element},this.scroll=function(t){return t?this.scroll.direction===t:this.scroll.top},this.scrollTo=function(e,n){t("body, html").animate({scrollTop:n&&n.length?n.offset().top:this.element.offset().top},e?e:0)},this.redirect=function(t,n){setTimeout(function(){n?e.location.href=n:e.location.reload()},t?t:0)},this.log=function(){this._console()},this._init()};o.prototype={defaults:{console:!1,scrollTracking:!0,resizeTracking:!0,breakpoints:[{screen:"small",to:767},{screen:"medium",from:768,to:991},{screen:"large",from:992}],devices:{opera:/Opera M(ob|in)i/i,androidMobile:/Android.+mobile/i,android:/Android/i,iosMobile:/iPhone|iPod/i,ios:/iPhone|iPod|iPad/i,ieMobile:/IEMobile/i,blackberry:/BlackBerry/i,other:/kindle|meego.+mobile|symbian|maemo|palm|hiptop|netfront|fennec|psp|mobile|pocket/i}},callbacks:{scroll:[],resize:[]},_init:function(){var t,e=this;this._mobile(),this.options.resizeTracking&&this.window.on("resize orientationchange",function(n){clearTimeout(t),t=setTimeout(function(){e._resize()},300)}),this.options.scrollTracking&&this.window.on("scroll",function(t){e._scroll()}),this.window.trigger("scroll").trigger("resize"),this.options.console&&this._console(),this.links(this)},_mobile:function(){for(var t in this.options.devices){if("other"===t&&this.agent.length>0)break;navigator.userAgent.match(this.options.devices[t])&&this.agent.push(t)}},_on:function(t,e){this.callbacks[t]!==i&&e instanceof Function&&this.callbacks[t].push(e)},_dispatch:function(e){this.callbacks&&this.callbacks[e].length&&t.each(this.callbacks[e],function(t,e){e()})},_scroll:function(){var t=e.pageYOffset!==i?e.pageYOffset:(n.documentElement||n.body.parentNode||n.body).top;this.scroll.top===i||this.scroll.top===t?this.scroll.direction=null:this.scroll.direction=this.scroll.top>t?"up":"down",this.scroll.top=t,this.resize={width:null,height:null},this._dispatch("scroll")},_resize:function(){var t=e.innerWidth,n=e.innerHeight;t===this.size.width?this.resize.width=null:this.resize.width=this.size.width<t?"increase":"decrease",n===this.size.height?this.resize.height=null:this.resize.height=this.size.height<n?"increase":"decrease",this.size.width=t,this.size.height=n,this.size.screen=this._size(),this.size.orientation=t>=n?"horizontal":"vertical",this.scroll.direction=null,this._dispatch("resize")},_size:function(){for(var t in this.options.breakpoints){var e=this.options.breakpoints[t];if(this._between(e.from,e.to))return e.screen}},_between:function(t,e){return e?t?this.size.width>=t&&this.size.width<=e:this.size.width<=e:t&&this.size.width>=t},_console:function(){var t=this;this._on("resize",function(){t._log()}),this._on("scroll",function(){t._log()}),t._log()},_log:function(){console.info((this.size.screen?this.size.screen:"-")+(this.size.orientation?" ("+this.size.orientation+")":"")+" | w: "+this.size.width+(this.resize.width?" ("+this.resize.width+")":"")+" | h: "+this.size.height+(this.resize.height?" ("+this.resize.height+")":"")+" | s: "+this.scroll.top+(this.scroll.direction?" ("+this.scroll.direction+")":"")+(this.agent.length>1?" | u: "+this.agent.join("/"):""))},links:function(e){this.document.on("click",'[href*="#"]',function(n){if(!this.href.includes("#")||location.hostname!==this.hostname||location.pathname.replace(/^\//,"")!==this.pathname.replace(/^\//,""))return!0;if(!(this.hash.length>1))return!1;var i=t(this.hash);i.length&&e.scrollTo(1e3,i)}),this.document.on("click","[data-focus]",function(e){t(t(this).data("focus")).trigger("focus")})}},t.fn.wEvents=function(t){return new o(this,t)}}(jQuery,window,document),function(t,e,n,i){t.cdr=t.cdr||{},t.cdr.Parser=function(){var i={},o="data-script",s="data-script-executed",r="data-script-not-executed",a="data-script-dependency",l=function(){c(n)},c=function(i){var s;if(t(i)!==t(n)){if(!t(i))return;if(i=t(i).get(),i.length>1){for(var r=0;r<i.length;r++)c(i);return}i=i[0]}if(i.querySelectorAll)s=i.querySelectorAll("["+o+"]");else if((!t.cdr.isIEunder7||e.opera)&&i.all){s=[];for(var r=0,a=i.all.length;r<a;r++)i.all[r]&&i.all[r][o]&&s.push(i.all[r])}u(s)},u=function(t){var e,n,i,s,r=[];if(t){for(var l=0;l<t.length;l++){for(i=t[l],s=0;i&&i.parentNode;)i=i.parentNode,s++;n=t[l].getAttribute(o),n.indexOf(",")&&(n=n.split(/\,/)),e=t[l].getAttribute(a),e=!!e&&e.split(","),t[l].removeAttribute(o),t[l].removeAttribute(a),r.push({elem:t[l],fn:n,depth:s,depends:e})}r=h(r);for(var c,u,d=[],f={},m=0;m<r.length;m++)c=r[m],u=c.fn,c.depends?(d.push(c),f[u]||(f[u]=0),f[u]++):p(u,c.elem);for(var g,v,y,w,x,b=0,_=!!d.length;_;){for(v=b,w=d.length-1;w>=0;w++){for(y=d[w],g=!1,x=0;x<y.depends.length;x++)f[y.depends[x]]&&f[y.depends[x]]>0&&(g=!0);g||(p(y.fn,y.elem),b++,f[y.depends[x]]--,d.slice(x,1))}if(v===b)throw"Deps error";d.length||(_=!0)}}},h=function(t){if(t.length<=1)return t;for(var e=Math.floor(Math.random()*t.length),n=t.splice(e,1),i=[],o=[],s=0,r=t.length;s<r;s++)t[s].depth<=n[0].depth?i.push(t[s]):o.push(t[s]);return h(i).concat(n,h(o))},d=0,p=function(e,n){if(t.isArray(e))for(var i=0;i<e.length;i++)p(e[i],n);else try{f(e,n)}catch(t){console&&console.error&&console.error(t,t.stack)}},f=function(n,o){var a,l,c=t(o),u=c.getId(),h=c.data(),p=!1;if(n=t.trim(n),l=t.cdr.camelCase(n),d++,i[n])a=i[n](o,h),p=!0;else if(t.fn[l])a=c[l](h),p=!0;else for(var f,m,g=[t,e],v=n.split(/\./),y=0;y<g.length;y++){f=g[y];for(var x=0;x<v.length;x++){if(m=t.cdr.camelCase(v[x]),!f[m]){f=null;break}f=f[m]}if(f&&f!==e){if(g[y]===t&&f.prototype&&f.prototype.widgetFullName)c[m](h),a=c.data(n.replace(/-/,".")),p=!0;else try{a=new f(o,h),p=!0}catch(t){}break}}var b=p?s:r,_=[n],C=o.getAttribute(b);C&&_.unshift(C),o.setAttribute(b,_.join(",")),w(u,n,p,a||null)},m=function(t,e){i[t]=e},g=[],v=[],y=function(e,n,i,o){e=e.toLowerCase(),n="element"===e?t(n).getId():n,v.push({type:e,value:n,fn:i,count:0,max:o||!1});for(var s=v.length-1,r=0;r<g.length;r++)x(s,r)},w=function(t,e,n,i){g.push([t,e,n,i]);for(var o=g.length-1,s=0;s<v.length;s++)x(s,o)},x=function(n,i){var o=v[n],s=g[i];if("element"!==o.type&&"script"!==o.type||"element"===o.type&&s[0]!==o.value)return!1;if("script"===o.type){var r=o.value,a=!1;t.isArray(r)||(r=r.split(/\s+/));for(var l=0;l<r.length;l++)s[1]===r[l]&&(a=!0);if(!a)return!1}(!o.max||o.count<o.max)&&(o.fn.apply(e,s),o.count++)},b=function(e,n){if(n)switch(e){case"att":o=n;break;case"executed":s=n;break;case"notExecuted":r=n;break;case"deps":a=n}else if(t.isPlainObject(e))for(var i in e)"string"==typeof e[i]&&b(i,e[i]);else b("att",e)},_=function(e){for(var n=[],i=0;i<g.length;i++)e&&"*"!=e&&g[i][1]!=e||!g[i][2]||n.push(t("#"+g[i][0]));return n};return t(l),{register:m,parse:c,on:y,one:function(t,e,n){y(t,e,n,1)},chngAttr:b,getExecuted:_}}()}(jQuery,window,document),function(t){"use strict";t.fn.equalHeight=function(){var e=[];return t.each(this,function(n,i){var o,s=t(i),r="border-box"===s.css("box-sizing")||"border-box"===s.css("-moz-box-sizing");o=r?s.innerHeight():s.height(),e.push(o)}),this.css("height",Math.max.apply(window,e)+"px"),this},t.fn.equalHeightGrid=function(e){var n=this.filter(":visible");n.css("height","auto");for(var i=0;i<n.length;i++)if(i%e===0){for(var o=t(n[i]),s=1;s<e;s++)o=o.add(n[i+s]);o.equalHeight()}return this},t.fn.detectGridColumns=function(){var e=0,n=0,i=this.filter(":visible");return i.each(function(i,o){var s=t(o).offset().top;return(0===e||s===e)&&(n++,void(e=s))}),n};var e=0;t.fn.responsiveEqualHeightGrid=function(){function n(){var t=i.detectGridColumns();i.equalHeightGrid(t)}var i=this,o=".grids_"+e;return i.data("grids-event-namespace",o),t(window).bind("resize"+o+" load"+o,n),n(),e++,this},t.fn.responsiveEqualHeightGridDestroy=function(){var e=this;return e.css("height","auto"),t(window).unbind(e.data("grids-event-namespace")),this}}(window.jQuery),!function(t){"use strict";var e=function(e,n){this.options=t.extend({},this.defaults,n),this.element=t(e),this._init()};e.prototype={defaults:{column:"> *"},_init:function(){this.element.find(this.options.column).responsiveEqualHeightGrid()}},t.fn.columnsHeight=function(n){return this.each(function(){t.data(this,"columnsHeight")||t.data(this,"columnsHeight",new e(this,n))})}}(jQuery),!function(t){"use strict";var e=function(e,n){this.options=t.extend({},this.defaults,n),this.element=t(e),this.renderNode=this.element.data("top"),this.renderNode&&this._create(),this.countEvent=null,this._init()};e.prototype={defaults:{linkClass:"top-link",linkContent:'<span class="sr-only">&uarr;</span>',activeClass:"in",timeout:2e3,height:300,callback:function(e){t.cdr.wEvents.scrollTo(1e3)}},_init:function(){var e=this;this.element.on("click",function(t){t.preventDefault(),"function"==typeof e.options.callback&&e.options.callback()}),t.cdr.wEvents&&t.cdr.wEvents.on("scroll",function(n){e._clear(),t.cdr.wEvents.scroll()>e.options.height?(e._show(),e._start(function(){e._hide()})):e._hide()})},_start:function(t){this.countEvent=setTimeout(function(){t()},this.options.timeout)},_clear:function(){this.countEvent&&(clearTimeout(this.countEvent),this.countEvent=null)},_show:function(){this.element.addClass(this.options.activeClass)},_hide:function(){this.element.removeClass(this.options.activeClass)},_create:function(){this.element=t('<a href="#">').addClass(this.options.linkClass).html(this.options.linkContent),t.cdr.wEvents.body(this.renderNode).append(this.element)}},t.fn.top=function(n){return this.each(function(){t.data(this,"top")||t.data(this,"top",new e(this,n))})}}(jQuery),!function(t,e){"use strict";var n=function(e,n){this.options=t.extend({},this.defaults,n),this.element=t(e),this.val=this._val,this.open=this._open,this._init()};n.prototype={defaults:{openClass:"open",activeClass:"selected",activeSelector:".selected",captionSelector:"> a",listSelector:"> ul a",callback:function(n){n.attr("href").length&&"#"!==n.attr("href")&&(t.cdr.wEvents!==e?t.cdr.wEvents.redirect(500,n.attr("href")):location.href=n.attr("href"))}},_init:function(){var e=this;this._build(),this.selected.on("click",function(t){t.preventDefault(),e._open(),e.is("content")||e.element.on("clickoutside",function(t){t.preventDefault(),t.stopPropagation(),e._close()})}),this.list.on("click",function(n){n.preventDefault(),n.stopPropagation(),e._close(),e._select(t(this))}),this._default()},_open:function(){this.element.toggleClass(this.options.openClass)},_close:function(){this.element.off("clickoutside"),this.element.removeClass(this.options.openClass)},_select:function(t){this.is("select")&&this._option(t),"function"==typeof this.options.callback&&this.options.callback(t)},_build:function(){if(this.list=this.element.find(this.options.listSelector),this.selected=this.element.find(this.options.captionSelector),!this.selected.length){var e=this.list.filter(this.options.activeSelector),n={href:"#"},i={},o=this.list.first().html().trim();e.length&&(n["data-value"]=e.data("value"),i.value=e.data("value"),o=e.html().trim()),this.selected=t("<a>").attr(n).data(i).html(o),this.element.prepend(this.selected)}this.is("select")&&this._hidden()},_hidden:function(){return!(!this.element.data("input")||(this.hidden=t(this.element.data("input")).val(this.selected.data("value")),this.element.removeAttr("data-input"),!this.hidden.length))||(this.hidden=t("<input>").attr({type:"hidden",name:this.element.data("name"),value:this.selected.data("value")}).insertAfter(this.selected),void this.element.removeAttr("data-name"))},_option:function(t){this.list.removeClass(this.options.activeClass),t.addClass(this.options.activeClass),this.selected.html(t.html().trim()),this.hidden.val(t.data("value"))},_val:function(t){return t?this._set(t):this._get()},_set:function(t){return this.is("select")?this.hidden.val(t):this.selected.html(t),this._get()},_get:function(){return this.is("select")?this.hidden.val():this.selected.html()},_default:function(){var e=t.cdr.queryParameter("dropdown");(this.element.data("dropdown-opened")||e&&e===this.element.attr("id"))&&this._open()},is:function(t){return this.options.mode===t}},t.fn.dropdown=function(e){return this.each(function(){t.data(this,"dropdown")||t.data(this,"dropdown",new n(this,e))})},t.fn.dropdownSelect=function(e){return this.each(function(){t.data(this,"select")||t.data(this,"select",new n(this,t.extend({},e,{mode:"select"})))})},t.fn.dropdownContent=function(e){return this.each(function(){t.data(this,"content")||t.data(this,"content",new n(this,t.extend({},e,{mode:"content"})))})}}(jQuery),!function(t){"use strict";var e=function(e,n){this.options=t.extend({},this.defaults,n),this.element=t(e),this._init()};e.prototype={defaults:{carousel:{itemClass:"owl-item",loop:!0,center:!0,nav:!0,navElement:"span",navText:["",""],dots:!1,dotsClass:"owl-dots",items:1,autoWidth:!0,video:!0,loopOn:3},popup:{delegate:"a",mainClass:"mfp-img-mobile mfp-modal-inverted mfp-modal-gallery",closeOnContentClick:!1,closeBtnInside:!1,fixedContentPos:!0,tClose:"",tLoading:"",gallery:{enabled:!0,tPrev:"",tNext:"",tCounter:""},image:{verticalFit:!0,tError:'<a href="%url%">Error 404</a>',titleSrc:function(t){return t.el.attr("title")}},callbacks:{elementParse:function(t){t.type=t.el.context.className.indexOf("owl-video")!==-1?"iframe":"image"}}}},_init:function(){this.options.carousel&&this.carousel(),this.options.popup&&this.popup()},carousel:function(){var t=this,e=this.options.carousel.loop,n=this.options.carousel.center;this.items=this.element.find("> *"),this.options.carousel.loopOn&&this.items.length<this.options.carousel.loopOn&&(this.options.carousel.loop=!1,this.options.carousel.center=!1),this.options.carousel.onRefreshed=function(){t.fix()},this.element.owlCarousel(this.options.carousel),this.options.carousel.loop=e,this.options.carousel.center=n,this.options.carousel.dots||this.element.find("."+this.options.carousel.dotsClass).remove(),setTimeout(function(){t.element.trigger("refresh.owl.carousel")},100*this.items.length)},popup:function(){this.element.magnificPopup(this.options.popup),this.fit()},fix:function(){var t=this.element.find(".owl-stage"),e=2*this.width();e>t.width()&&t.width(e)},width:function(){var e=this,n=0;return this.items.find("img").each(function(){n+=e.size(t(this))}),n},size:function(t){return Math.ceil(t[0].naturalWidth)+this.space(t,"margin-left")+this.space(t,"padding-left")+this.space(t,"margin-right")+this.space(t,"padding-right")},space:function(t,e){var n=parseInt(t.css(e).slice(0,-2));return n?n:0},fit:function(){this.element.find(this.options.popup.delegate).each(function(){var e=t(this),n=e.find("img");e.addClass(n.height()>n.width()?"image-item-vertical":"image-item-horizontal")})}},t.fn.gallery=function(n){return this.each(function(){t.data(this,"gallery")||t.data(this,"gallery",new e(this,n))})},t.fn.carousel=function(n){return this.each(function(){t.data(this,"carousel")||t.data(this,"carousel",new e(this,{popup:!1,carousel:{loop:!1,center:!1,nav:!0,navContainerClass:"owl-nav owl-inverted",navElement:"a",navText:["",""],dots:!1,dotsClass:"owl-dots",itemElement:"li",stageElement:"ul",items:4,responsive:{0:{items:1},767:{items:2},991:{items:4}}}}))})},t.fn.popup=function(n){return this.each(function(){t.data(this,"popup")||t.data(this,"popup",new e(this,{carousel:!1,popup:{type:"image",delegate:"a",mainClass:"mfp-img-mobile mfp-modal-inverted mfp-modal-gallery",closeOnContentClick:!1,closeBtnInside:!1,fixedContentPos:!0,tClose:"",tLoading:"",gallery:{enabled:!0,tPrev:"",tNext:"",tCounter:""},image:{verticalFit:!0,tError:'<a href="%url%">Error 404</a>',titleSrc:function(t){return t.el.attr("title")}}}}))})}}(jQuery),!function(t,e){"use strict";var n=function(e,n){return this.options=t.extend({},this.defaults,n),this.element=t(e),this.open=function(){this._open()},this.close=function(){this._close()},this._init(),this};n.prototype={defaults:{modalBaseClass:"mfp-modal",modalStyle:!0,modalWidth:null,modalRender:!1,modalClose:!0,modalCloseInside:!0,modalCloseOutside:!0,modalParameter:"modal",callbacks:{},popup:{type:"inline",showCloseBtn:!0,enableEscapeKey:!0,closeBtnInside:!1,closeOnBgClick:!1,closeOnContentClick:!1,fixedContentPos:!0,tClose:"",tLoading:""}},_init:function(){this._build(),this.element.data("modal-trigger")&&this._trigger(t(this.element.data("modal-trigger"))),t.cdr.queryParameter(this.options.modalParameter)===this.element.attr("id")&&this._open()},_trigger:function(t){t.length&&t.magnificPopup(this._options())},_open:function(){t.magnificPopup.open(this._options())},_close:function(){t.magnificPopup.close()},_build:function(){this.element.hasClass(this.options.modalClass)||(this.options.modalRender&&(this.element.detach(),this.element.removeAttr("style"),this.element=t("<div>").append(this.element)),this.element.addClass(this._class())),this._options()},_class:function(){var t=this.options.modalWidth&&this.options.modalWidth>0&&this.options.modalWidth<100?this.options.modalWidth:"auto";return this.options.modalClass&&(t+=" "+this.options.modalClass),this.options.modalBaseClass+" "+this.options.modalBaseClass+"-"+t},_options:function(){var e=t.extend({},this.options.popup,{key:this.element.attr("id"),items:{src:this.element}});return e.showCloseBtn=this.options.modalClose,e.enableEscapeKey=this.options.modalClose,e.closeOnBgClick=this.options.modalCloseOutside,e.closeBtnInside=this.options.modalCloseInside,this.options.modalStyle&&(e.mainClass=this.options.modalStyle===!0?"mfp-modal-inverted":this.options.modalStyle),this.options.callbacks&&(e.callbacks=this.options.callbacks),e}},t.fn.modal=function(e){return this.each(function(){t.data(this,"modal")||t.data(this,"modal",new n(this,e))})}}(jQuery),!function(t,e){"use strict";var n=function(e,n){this.options=t.extend({},this.defaults,n),this.element=t(e),this._init()};n.prototype={defaults:{activeClass:"in",imagesSeparator:"|",breakpoint:768,overlay:null,brightnessBreakpoint:165,urlApi:"/api/api?api=entidad.getCover&apikey=3d6473111cb3f131f00c2c07230f9b6d&format=json"},_init:function(){var t=this;if(this.options.image&&this.options.image.length){var e=this.options.image.split(this.options.imagesSeparator);this.build(e)}else this.options.eloc&&this.api(function(e){var n=[];e.img_mobile&&n.push(e.img_mobile),e.img_desktop&&n.push(e.img_desktop),n.length&&t.build(n)})},api:function(e){t.ajax({url:this.options.urlApi+"&eloc="+this.options.eloc,success:function(t){return e(t)},error:function(t,e,n){console.log(t.status),console.log(n)}})},build:function(t){var e=this;this.brightness(t[0],function(n){e.style(n,t)})},style:function(e,n){this.options.overlay&&this.overlay(e);var i=n.length>1?this.background(n[0])+this.background(n[1],!0):this.background(n[0],!0);t("<style>"+i+"</style>").appendTo("head"),this.activate()},overlay:function(t){var e=255-this.options.brightnessBreakpoint,n=t-this.options.brightnessBreakpoint,i=n<=0?Math.ceil(5*n/e):0;this.element.addClass("cover-overlay").addClass("cover-overlay-"+i)},background:function(t,e){var n="#"+this.element.getId()+'{background-image:url("'+t+'");}';return e?"@media(min-width:"+this.options.breakpoint+"px){"+n+"}":n},brightness:function(t,e){return e(this.options.brightnessBreakpoint)},activate:function(){this.element.addClass(this.options.activeClass)}},t.fn.cover=function(e){return this.each(function(){t.data(this,"cover")||t.data(this,"cover",new n(this,e))})}}(jQuery,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
